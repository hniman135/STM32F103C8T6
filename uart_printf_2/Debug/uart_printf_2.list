
uart_printf_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017c8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080018d4  080018d4  000028d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001900  08001900  00003068  2**0
                  CONTENTS
  4 .ARM          00000000  08001900  08001900  00003068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001900  08001900  00003068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001900  08001900  00002900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001904  08001904  00002904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08001908  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000068  08001970  00003068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08001970  000031d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002d40  00000000  00000000  00003091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f9d  00000000  00000000  00005dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000450  00000000  00000000  00006d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000310  00000000  00000000  000071c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fd5  00000000  00000000  000074d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004e34  00000000  00000000  0001e4a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000810a9  00000000  00000000  000232d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a4382  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001560  00000000  00000000  000a43c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000a5928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080018bc 	.word	0x080018bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080018bc 	.word	0x080018bc

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write (int file, char *ptr, int len){
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
	int i=0;
 80001a4:	2300      	movs	r3, #0
 80001a6:	617b      	str	r3, [r7, #20]
	for (i=0; i<len; i++)
 80001a8:	2300      	movs	r3, #0
 80001aa:	617b      	str	r3, [r7, #20]
 80001ac:	e009      	b.n	80001c2 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80001ae:	68bb      	ldr	r3, [r7, #8]
 80001b0:	1c5a      	adds	r2, r3, #1
 80001b2:	60ba      	str	r2, [r7, #8]
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	4618      	mov	r0, r3
 80001b8:	f7ff ffc8 	bl	800014c <ITM_SendChar>
	for (i=0; i<len; i++)
 80001bc:	697b      	ldr	r3, [r7, #20]
 80001be:	3301      	adds	r3, #1
 80001c0:	617b      	str	r3, [r7, #20]
 80001c2:	697a      	ldr	r2, [r7, #20]
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	429a      	cmp	r2, r3
 80001c8:	dbf1      	blt.n	80001ae <_write+0x16>
	return len;
 80001ca:	687b      	ldr	r3, [r7, #4]
}
 80001cc:	4618      	mov	r0, r3
 80001ce:	3718      	adds	r7, #24
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 f982 	bl	80004e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f80e 	bl	80001fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f848 	bl	8000274 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("hello\r\n");
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <main+0x24>)
 80001e6:	f000 ffdb 	bl	80011a0 <puts>
	  HAL_Delay(1000);
 80001ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001ee:	f000 f9d9 	bl	80005a4 <HAL_Delay>
  {
 80001f2:	bf00      	nop
 80001f4:	e7f6      	b.n	80001e4 <main+0x10>
 80001f6:	bf00      	nop
 80001f8:	080018d4 	.word	0x080018d4

080001fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b090      	sub	sp, #64	@ 0x40
 8000200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000202:	f107 0318 	add.w	r3, r7, #24
 8000206:	2228      	movs	r2, #40	@ 0x28
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f001 f8a8 	bl	8001360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
 800021c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800021e:	2302      	movs	r3, #2
 8000220:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000222:	2301      	movs	r3, #1
 8000224:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000226:	2310      	movs	r3, #16
 8000228:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800022a:	2300      	movs	r3, #0
 800022c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022e:	f107 0318 	add.w	r3, r7, #24
 8000232:	4618      	mov	r0, r3
 8000234:	f000 fabe 	bl	80007b4 <HAL_RCC_OscConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800023e:	f000 f83b 	bl	80002b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000242:	230f      	movs	r3, #15
 8000244:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000246:	2300      	movs	r3, #0
 8000248:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f000 fd2c 	bl	8000cb8 <HAL_RCC_ClockConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000266:	f000 f827 	bl	80002b8 <Error_Handler>
  }
}
 800026a:	bf00      	nop
 800026c:	3740      	adds	r7, #64	@ 0x40
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
	...

08000274 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027a:	4b0e      	ldr	r3, [pc, #56]	@ (80002b4 <MX_GPIO_Init+0x40>)
 800027c:	699b      	ldr	r3, [r3, #24]
 800027e:	4a0d      	ldr	r2, [pc, #52]	@ (80002b4 <MX_GPIO_Init+0x40>)
 8000280:	f043 0304 	orr.w	r3, r3, #4
 8000284:	6193      	str	r3, [r2, #24]
 8000286:	4b0b      	ldr	r3, [pc, #44]	@ (80002b4 <MX_GPIO_Init+0x40>)
 8000288:	699b      	ldr	r3, [r3, #24]
 800028a:	f003 0304 	and.w	r3, r3, #4
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000292:	4b08      	ldr	r3, [pc, #32]	@ (80002b4 <MX_GPIO_Init+0x40>)
 8000294:	699b      	ldr	r3, [r3, #24]
 8000296:	4a07      	ldr	r2, [pc, #28]	@ (80002b4 <MX_GPIO_Init+0x40>)
 8000298:	f043 0308 	orr.w	r3, r3, #8
 800029c:	6193      	str	r3, [r2, #24]
 800029e:	4b05      	ldr	r3, [pc, #20]	@ (80002b4 <MX_GPIO_Init+0x40>)
 80002a0:	699b      	ldr	r3, [r3, #24]
 80002a2:	f003 0308 	and.w	r3, r3, #8
 80002a6:	603b      	str	r3, [r7, #0]
 80002a8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bc80      	pop	{r7}
 80002b2:	4770      	bx	lr
 80002b4:	40021000 	.word	0x40021000

080002b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002bc:	b672      	cpsid	i
}
 80002be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002c0:	bf00      	nop
 80002c2:	e7fd      	b.n	80002c0 <Error_Handler+0x8>

080002c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002ca:	4b15      	ldr	r3, [pc, #84]	@ (8000320 <HAL_MspInit+0x5c>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	4a14      	ldr	r2, [pc, #80]	@ (8000320 <HAL_MspInit+0x5c>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6193      	str	r3, [r2, #24]
 80002d6:	4b12      	ldr	r3, [pc, #72]	@ (8000320 <HAL_MspInit+0x5c>)
 80002d8:	699b      	ldr	r3, [r3, #24]
 80002da:	f003 0301 	and.w	r3, r3, #1
 80002de:	60bb      	str	r3, [r7, #8]
 80002e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000320 <HAL_MspInit+0x5c>)
 80002e4:	69db      	ldr	r3, [r3, #28]
 80002e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000320 <HAL_MspInit+0x5c>)
 80002e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002ec:	61d3      	str	r3, [r2, #28]
 80002ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000320 <HAL_MspInit+0x5c>)
 80002f0:	69db      	ldr	r3, [r3, #28]
 80002f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80002f6:	607b      	str	r3, [r7, #4]
 80002f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000324 <HAL_MspInit+0x60>)
 80002fc:	685b      	ldr	r3, [r3, #4]
 80002fe:	60fb      	str	r3, [r7, #12]
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000306:	60fb      	str	r3, [r7, #12]
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800030e:	60fb      	str	r3, [r7, #12]
 8000310:	4a04      	ldr	r2, [pc, #16]	@ (8000324 <HAL_MspInit+0x60>)
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000316:	bf00      	nop
 8000318:	3714      	adds	r7, #20
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	40021000 	.word	0x40021000
 8000324:	40010000 	.word	0x40010000

08000328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800032c:	bf00      	nop
 800032e:	e7fd      	b.n	800032c <NMI_Handler+0x4>

08000330 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000334:	bf00      	nop
 8000336:	e7fd      	b.n	8000334 <HardFault_Handler+0x4>

08000338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800033c:	bf00      	nop
 800033e:	e7fd      	b.n	800033c <MemManage_Handler+0x4>

08000340 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000344:	bf00      	nop
 8000346:	e7fd      	b.n	8000344 <BusFault_Handler+0x4>

08000348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800034c:	bf00      	nop
 800034e:	e7fd      	b.n	800034c <UsageFault_Handler+0x4>

08000350 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr

0800035c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr

08000374 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000378:	f000 f8f8 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}

08000380 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
 8000386:	60f8      	str	r0, [r7, #12]
 8000388:	60b9      	str	r1, [r7, #8]
 800038a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]
 8000390:	e00a      	b.n	80003a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000392:	f3af 8000 	nop.w
 8000396:	4601      	mov	r1, r0
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	1c5a      	adds	r2, r3, #1
 800039c:	60ba      	str	r2, [r7, #8]
 800039e:	b2ca      	uxtb	r2, r1
 80003a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	3301      	adds	r3, #1
 80003a6:	617b      	str	r3, [r7, #20]
 80003a8:	697a      	ldr	r2, [r7, #20]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	dbf0      	blt.n	8000392 <_read+0x12>
  }

  return len;
 80003b0:	687b      	ldr	r3, [r7, #4]
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3718      	adds	r7, #24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}

080003ba <_close>:
  }
  return len;
}

int _close(int file)
{
 80003ba:	b480      	push	{r7}
 80003bc:	b083      	sub	sp, #12
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr

080003d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003e0:	605a      	str	r2, [r3, #4]
  return 0;
 80003e2:	2300      	movs	r3, #0
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr

080003ee <_isatty>:

int _isatty(int file)
{
 80003ee:	b480      	push	{r7}
 80003f0:	b083      	sub	sp, #12
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003f6:	2301      	movs	r3, #1
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr

08000402 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000402:	b480      	push	{r7}
 8000404:	b085      	sub	sp, #20
 8000406:	af00      	add	r7, sp, #0
 8000408:	60f8      	str	r0, [r7, #12]
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800040e:	2300      	movs	r3, #0
}
 8000410:	4618      	mov	r0, r3
 8000412:	3714      	adds	r7, #20
 8000414:	46bd      	mov	sp, r7
 8000416:	bc80      	pop	{r7}
 8000418:	4770      	bx	lr
	...

0800041c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b086      	sub	sp, #24
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000424:	4a14      	ldr	r2, [pc, #80]	@ (8000478 <_sbrk+0x5c>)
 8000426:	4b15      	ldr	r3, [pc, #84]	@ (800047c <_sbrk+0x60>)
 8000428:	1ad3      	subs	r3, r2, r3
 800042a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000430:	4b13      	ldr	r3, [pc, #76]	@ (8000480 <_sbrk+0x64>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d102      	bne.n	800043e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000438:	4b11      	ldr	r3, [pc, #68]	@ (8000480 <_sbrk+0x64>)
 800043a:	4a12      	ldr	r2, [pc, #72]	@ (8000484 <_sbrk+0x68>)
 800043c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800043e:	4b10      	ldr	r3, [pc, #64]	@ (8000480 <_sbrk+0x64>)
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4413      	add	r3, r2
 8000446:	693a      	ldr	r2, [r7, #16]
 8000448:	429a      	cmp	r2, r3
 800044a:	d207      	bcs.n	800045c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800044c:	f000 ffd6 	bl	80013fc <__errno>
 8000450:	4603      	mov	r3, r0
 8000452:	220c      	movs	r2, #12
 8000454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000456:	f04f 33ff 	mov.w	r3, #4294967295
 800045a:	e009      	b.n	8000470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800045c:	4b08      	ldr	r3, [pc, #32]	@ (8000480 <_sbrk+0x64>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000462:	4b07      	ldr	r3, [pc, #28]	@ (8000480 <_sbrk+0x64>)
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4413      	add	r3, r2
 800046a:	4a05      	ldr	r2, [pc, #20]	@ (8000480 <_sbrk+0x64>)
 800046c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800046e:	68fb      	ldr	r3, [r7, #12]
}
 8000470:	4618      	mov	r0, r3
 8000472:	3718      	adds	r7, #24
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20005000 	.word	0x20005000
 800047c:	00000400 	.word	0x00000400
 8000480:	20000084 	.word	0x20000084
 8000484:	200001d8 	.word	0x200001d8

08000488 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr

08000494 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000494:	f7ff fff8 	bl	8000488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000498:	480b      	ldr	r0, [pc, #44]	@ (80004c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800049a:	490c      	ldr	r1, [pc, #48]	@ (80004cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800049c:	4a0c      	ldr	r2, [pc, #48]	@ (80004d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800049e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a0:	e002      	b.n	80004a8 <LoopCopyDataInit>

080004a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004a6:	3304      	adds	r3, #4

080004a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004ac:	d3f9      	bcc.n	80004a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ae:	4a09      	ldr	r2, [pc, #36]	@ (80004d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004b0:	4c09      	ldr	r4, [pc, #36]	@ (80004d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b4:	e001      	b.n	80004ba <LoopFillZerobss>

080004b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b8:	3204      	adds	r2, #4

080004ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004bc:	d3fb      	bcc.n	80004b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004be:	f000 ffa3 	bl	8001408 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004c2:	f7ff fe87 	bl	80001d4 <main>
  bx lr
 80004c6:	4770      	bx	lr
  ldr r0, =_sdata
 80004c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004cc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80004d0:	08001908 	.word	0x08001908
  ldr r2, =_sbss
 80004d4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80004d8:	200001d8 	.word	0x200001d8

080004dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004dc:	e7fe      	b.n	80004dc <ADC1_2_IRQHandler>
	...

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	@ (8000508 <HAL_Init+0x28>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	@ (8000508 <HAL_Init+0x28>)
 80004ea:	f043 0310 	orr.w	r3, r3, #16
 80004ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f92b 	bl	800074c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	200f      	movs	r0, #15
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f7ff fee2 	bl	80002c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40022000 	.word	0x40022000

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	@ (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	@ (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f935 	bl	800079a <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f90b 	bl	8000762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	@ (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000000 	.word	0x20000000
 8000564:	20000008 	.word	0x20000008
 8000568:	20000004 	.word	0x20000004

0800056c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b05      	ldr	r3, [pc, #20]	@ (8000588 <HAL_IncTick+0x1c>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b05      	ldr	r3, [pc, #20]	@ (800058c <HAL_IncTick+0x20>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a03      	ldr	r2, [pc, #12]	@ (800058c <HAL_IncTick+0x20>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	20000008 	.word	0x20000008
 800058c:	20000088 	.word	0x20000088

08000590 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  return uwTick;
 8000594:	4b02      	ldr	r3, [pc, #8]	@ (80005a0 <HAL_GetTick+0x10>)
 8000596:	681b      	ldr	r3, [r3, #0]
}
 8000598:	4618      	mov	r0, r3
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	20000088 	.word	0x20000088

080005a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005ac:	f7ff fff0 	bl	8000590 <HAL_GetTick>
 80005b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005bc:	d005      	beq.n	80005ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005be:	4b0a      	ldr	r3, [pc, #40]	@ (80005e8 <HAL_Delay+0x44>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	461a      	mov	r2, r3
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4413      	add	r3, r2
 80005c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005ca:	bf00      	nop
 80005cc:	f7ff ffe0 	bl	8000590 <HAL_GetTick>
 80005d0:	4602      	mov	r2, r0
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d8f7      	bhi.n	80005cc <HAL_Delay+0x28>
  {
  }
}
 80005dc:	bf00      	nop
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000008 	.word	0x20000008

080005ec <__NVIC_SetPriorityGrouping>:
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f003 0307 	and.w	r3, r3, #7
 80005fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <__NVIC_SetPriorityGrouping+0x44>)
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000602:	68ba      	ldr	r2, [r7, #8]
 8000604:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000608:	4013      	ands	r3, r2
 800060a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000614:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000618:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800061c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800061e:	4a04      	ldr	r2, [pc, #16]	@ (8000630 <__NVIC_SetPriorityGrouping+0x44>)
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	60d3      	str	r3, [r2, #12]
}
 8000624:	bf00      	nop
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <__NVIC_GetPriorityGrouping>:
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000638:	4b04      	ldr	r3, [pc, #16]	@ (800064c <__NVIC_GetPriorityGrouping+0x18>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	0a1b      	lsrs	r3, r3, #8
 800063e:	f003 0307 	and.w	r3, r3, #7
}
 8000642:	4618      	mov	r0, r3
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <__NVIC_SetPriority>:
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	6039      	str	r1, [r7, #0]
 800065a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	db0a      	blt.n	800067a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	b2da      	uxtb	r2, r3
 8000668:	490c      	ldr	r1, [pc, #48]	@ (800069c <__NVIC_SetPriority+0x4c>)
 800066a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066e:	0112      	lsls	r2, r2, #4
 8000670:	b2d2      	uxtb	r2, r2
 8000672:	440b      	add	r3, r1
 8000674:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000678:	e00a      	b.n	8000690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4908      	ldr	r1, [pc, #32]	@ (80006a0 <__NVIC_SetPriority+0x50>)
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	3b04      	subs	r3, #4
 8000688:	0112      	lsls	r2, r2, #4
 800068a:	b2d2      	uxtb	r2, r2
 800068c:	440b      	add	r3, r1
 800068e:	761a      	strb	r2, [r3, #24]
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000e100 	.word	0xe000e100
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <NVIC_EncodePriority>:
{
 80006a4:	b480      	push	{r7}
 80006a6:	b089      	sub	sp, #36	@ 0x24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	f1c3 0307 	rsb	r3, r3, #7
 80006be:	2b04      	cmp	r3, #4
 80006c0:	bf28      	it	cs
 80006c2:	2304      	movcs	r3, #4
 80006c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	3304      	adds	r3, #4
 80006ca:	2b06      	cmp	r3, #6
 80006cc:	d902      	bls.n	80006d4 <NVIC_EncodePriority+0x30>
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3b03      	subs	r3, #3
 80006d2:	e000      	b.n	80006d6 <NVIC_EncodePriority+0x32>
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	f04f 32ff 	mov.w	r2, #4294967295
 80006dc:	69bb      	ldr	r3, [r7, #24]
 80006de:	fa02 f303 	lsl.w	r3, r2, r3
 80006e2:	43da      	mvns	r2, r3
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	401a      	ands	r2, r3
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ec:	f04f 31ff 	mov.w	r1, #4294967295
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	fa01 f303 	lsl.w	r3, r1, r3
 80006f6:	43d9      	mvns	r1, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006fc:	4313      	orrs	r3, r2
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3724      	adds	r7, #36	@ 0x24
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr

08000708 <SysTick_Config>:
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3b01      	subs	r3, #1
 8000714:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000718:	d301      	bcc.n	800071e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800071a:	2301      	movs	r3, #1
 800071c:	e00f      	b.n	800073e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800071e:	4a0a      	ldr	r2, [pc, #40]	@ (8000748 <SysTick_Config+0x40>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3b01      	subs	r3, #1
 8000724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000726:	210f      	movs	r1, #15
 8000728:	f04f 30ff 	mov.w	r0, #4294967295
 800072c:	f7ff ff90 	bl	8000650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000730:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <SysTick_Config+0x40>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000736:	4b04      	ldr	r3, [pc, #16]	@ (8000748 <SysTick_Config+0x40>)
 8000738:	2207      	movs	r2, #7
 800073a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	e000e010 	.word	0xe000e010

0800074c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff ff49 	bl	80005ec <__NVIC_SetPriorityGrouping>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000762:	b580      	push	{r7, lr}
 8000764:	b086      	sub	sp, #24
 8000766:	af00      	add	r7, sp, #0
 8000768:	4603      	mov	r3, r0
 800076a:	60b9      	str	r1, [r7, #8]
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000774:	f7ff ff5e 	bl	8000634 <__NVIC_GetPriorityGrouping>
 8000778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	68b9      	ldr	r1, [r7, #8]
 800077e:	6978      	ldr	r0, [r7, #20]
 8000780:	f7ff ff90 	bl	80006a4 <NVIC_EncodePriority>
 8000784:	4602      	mov	r2, r0
 8000786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078a:	4611      	mov	r1, r2
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff5f 	bl	8000650 <__NVIC_SetPriority>
}
 8000792:	bf00      	nop
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f7ff ffb0 	bl	8000708 <SysTick_Config>
 80007a8:	4603      	mov	r3, r0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d101      	bne.n	80007c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	e272      	b.n	8000cac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	f000 8087 	beq.w	80008e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80007d4:	4b92      	ldr	r3, [pc, #584]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	f003 030c 	and.w	r3, r3, #12
 80007dc:	2b04      	cmp	r3, #4
 80007de:	d00c      	beq.n	80007fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007e0:	4b8f      	ldr	r3, [pc, #572]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	f003 030c 	and.w	r3, r3, #12
 80007e8:	2b08      	cmp	r3, #8
 80007ea:	d112      	bne.n	8000812 <HAL_RCC_OscConfig+0x5e>
 80007ec:	4b8c      	ldr	r3, [pc, #560]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80007f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80007f8:	d10b      	bne.n	8000812 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007fa:	4b89      	ldr	r3, [pc, #548]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000802:	2b00      	cmp	r3, #0
 8000804:	d06c      	beq.n	80008e0 <HAL_RCC_OscConfig+0x12c>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d168      	bne.n	80008e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	e24c      	b.n	8000cac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800081a:	d106      	bne.n	800082a <HAL_RCC_OscConfig+0x76>
 800081c:	4b80      	ldr	r3, [pc, #512]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a7f      	ldr	r2, [pc, #508]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000822:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	e02e      	b.n	8000888 <HAL_RCC_OscConfig+0xd4>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d10c      	bne.n	800084c <HAL_RCC_OscConfig+0x98>
 8000832:	4b7b      	ldr	r3, [pc, #492]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a7a      	ldr	r2, [pc, #488]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000838:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800083c:	6013      	str	r3, [r2, #0]
 800083e:	4b78      	ldr	r3, [pc, #480]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a77      	ldr	r2, [pc, #476]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000844:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000848:	6013      	str	r3, [r2, #0]
 800084a:	e01d      	b.n	8000888 <HAL_RCC_OscConfig+0xd4>
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000854:	d10c      	bne.n	8000870 <HAL_RCC_OscConfig+0xbc>
 8000856:	4b72      	ldr	r3, [pc, #456]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a71      	ldr	r2, [pc, #452]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 800085c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000860:	6013      	str	r3, [r2, #0]
 8000862:	4b6f      	ldr	r3, [pc, #444]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a6e      	ldr	r2, [pc, #440]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000868:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800086c:	6013      	str	r3, [r2, #0]
 800086e:	e00b      	b.n	8000888 <HAL_RCC_OscConfig+0xd4>
 8000870:	4b6b      	ldr	r3, [pc, #428]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a6a      	ldr	r2, [pc, #424]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000876:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	4b68      	ldr	r3, [pc, #416]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a67      	ldr	r2, [pc, #412]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000882:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000886:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d013      	beq.n	80008b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000890:	f7ff fe7e 	bl	8000590 <HAL_GetTick>
 8000894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000896:	e008      	b.n	80008aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000898:	f7ff fe7a 	bl	8000590 <HAL_GetTick>
 800089c:	4602      	mov	r2, r0
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	2b64      	cmp	r3, #100	@ 0x64
 80008a4:	d901      	bls.n	80008aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80008a6:	2303      	movs	r3, #3
 80008a8:	e200      	b.n	8000cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008aa:	4b5d      	ldr	r3, [pc, #372]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d0f0      	beq.n	8000898 <HAL_RCC_OscConfig+0xe4>
 80008b6:	e014      	b.n	80008e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008b8:	f7ff fe6a 	bl	8000590 <HAL_GetTick>
 80008bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008be:	e008      	b.n	80008d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008c0:	f7ff fe66 	bl	8000590 <HAL_GetTick>
 80008c4:	4602      	mov	r2, r0
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	2b64      	cmp	r3, #100	@ 0x64
 80008cc:	d901      	bls.n	80008d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80008ce:	2303      	movs	r3, #3
 80008d0:	e1ec      	b.n	8000cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008d2:	4b53      	ldr	r3, [pc, #332]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d1f0      	bne.n	80008c0 <HAL_RCC_OscConfig+0x10c>
 80008de:	e000      	b.n	80008e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d063      	beq.n	80009b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80008ee:	4b4c      	ldr	r3, [pc, #304]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f003 030c 	and.w	r3, r3, #12
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d00b      	beq.n	8000912 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80008fa:	4b49      	ldr	r3, [pc, #292]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	f003 030c 	and.w	r3, r3, #12
 8000902:	2b08      	cmp	r3, #8
 8000904:	d11c      	bne.n	8000940 <HAL_RCC_OscConfig+0x18c>
 8000906:	4b46      	ldr	r3, [pc, #280]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800090e:	2b00      	cmp	r3, #0
 8000910:	d116      	bne.n	8000940 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000912:	4b43      	ldr	r3, [pc, #268]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	2b00      	cmp	r3, #0
 800091c:	d005      	beq.n	800092a <HAL_RCC_OscConfig+0x176>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	691b      	ldr	r3, [r3, #16]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d001      	beq.n	800092a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	e1c0      	b.n	8000cac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800092a:	4b3d      	ldr	r3, [pc, #244]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	4939      	ldr	r1, [pc, #228]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 800093a:	4313      	orrs	r3, r2
 800093c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800093e:	e03a      	b.n	80009b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	691b      	ldr	r3, [r3, #16]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d020      	beq.n	800098a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000948:	4b36      	ldr	r3, [pc, #216]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 800094a:	2201      	movs	r2, #1
 800094c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800094e:	f7ff fe1f 	bl	8000590 <HAL_GetTick>
 8000952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000954:	e008      	b.n	8000968 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000956:	f7ff fe1b 	bl	8000590 <HAL_GetTick>
 800095a:	4602      	mov	r2, r0
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	1ad3      	subs	r3, r2, r3
 8000960:	2b02      	cmp	r3, #2
 8000962:	d901      	bls.n	8000968 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000964:	2303      	movs	r3, #3
 8000966:	e1a1      	b.n	8000cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000968:	4b2d      	ldr	r3, [pc, #180]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f003 0302 	and.w	r3, r3, #2
 8000970:	2b00      	cmp	r3, #0
 8000972:	d0f0      	beq.n	8000956 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000974:	4b2a      	ldr	r3, [pc, #168]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	695b      	ldr	r3, [r3, #20]
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	4927      	ldr	r1, [pc, #156]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 8000984:	4313      	orrs	r3, r2
 8000986:	600b      	str	r3, [r1, #0]
 8000988:	e015      	b.n	80009b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800098a:	4b26      	ldr	r3, [pc, #152]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000990:	f7ff fdfe 	bl	8000590 <HAL_GetTick>
 8000994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000996:	e008      	b.n	80009aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000998:	f7ff fdfa 	bl	8000590 <HAL_GetTick>
 800099c:	4602      	mov	r2, r0
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d901      	bls.n	80009aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80009a6:	2303      	movs	r3, #3
 80009a8:	e180      	b.n	8000cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d1f0      	bne.n	8000998 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d03a      	beq.n	8000a38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d019      	beq.n	80009fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009ca:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <HAL_RCC_OscConfig+0x274>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009d0:	f7ff fdde 	bl	8000590 <HAL_GetTick>
 80009d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009d6:	e008      	b.n	80009ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009d8:	f7ff fdda 	bl	8000590 <HAL_GetTick>
 80009dc:	4602      	mov	r2, r0
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d901      	bls.n	80009ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80009e6:	2303      	movs	r3, #3
 80009e8:	e160      	b.n	8000cac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000a20 <HAL_RCC_OscConfig+0x26c>)
 80009ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d0f0      	beq.n	80009d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80009f6:	2001      	movs	r0, #1
 80009f8:	f000 fa9c 	bl	8000f34 <RCC_Delay>
 80009fc:	e01c      	b.n	8000a38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <HAL_RCC_OscConfig+0x274>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a04:	f7ff fdc4 	bl	8000590 <HAL_GetTick>
 8000a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a0a:	e00f      	b.n	8000a2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a0c:	f7ff fdc0 	bl	8000590 <HAL_GetTick>
 8000a10:	4602      	mov	r2, r0
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	2b02      	cmp	r3, #2
 8000a18:	d908      	bls.n	8000a2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	e146      	b.n	8000cac <HAL_RCC_OscConfig+0x4f8>
 8000a1e:	bf00      	nop
 8000a20:	40021000 	.word	0x40021000
 8000a24:	42420000 	.word	0x42420000
 8000a28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a2c:	4b92      	ldr	r3, [pc, #584]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a30:	f003 0302 	and.w	r3, r3, #2
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1e9      	bne.n	8000a0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f003 0304 	and.w	r3, r3, #4
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	f000 80a6 	beq.w	8000b92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a4a:	4b8b      	ldr	r3, [pc, #556]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d10d      	bne.n	8000a72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	4b88      	ldr	r3, [pc, #544]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	4a87      	ldr	r2, [pc, #540]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a60:	61d3      	str	r3, [r2, #28]
 8000a62:	4b85      	ldr	r3, [pc, #532]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a72:	4b82      	ldr	r3, [pc, #520]	@ (8000c7c <HAL_RCC_OscConfig+0x4c8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d118      	bne.n	8000ab0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a7e:	4b7f      	ldr	r3, [pc, #508]	@ (8000c7c <HAL_RCC_OscConfig+0x4c8>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a7e      	ldr	r2, [pc, #504]	@ (8000c7c <HAL_RCC_OscConfig+0x4c8>)
 8000a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a8a:	f7ff fd81 	bl	8000590 <HAL_GetTick>
 8000a8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a90:	e008      	b.n	8000aa4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a92:	f7ff fd7d 	bl	8000590 <HAL_GetTick>
 8000a96:	4602      	mov	r2, r0
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	2b64      	cmp	r3, #100	@ 0x64
 8000a9e:	d901      	bls.n	8000aa4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	e103      	b.n	8000cac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aa4:	4b75      	ldr	r3, [pc, #468]	@ (8000c7c <HAL_RCC_OscConfig+0x4c8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d0f0      	beq.n	8000a92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d106      	bne.n	8000ac6 <HAL_RCC_OscConfig+0x312>
 8000ab8:	4b6f      	ldr	r3, [pc, #444]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000aba:	6a1b      	ldr	r3, [r3, #32]
 8000abc:	4a6e      	ldr	r2, [pc, #440]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6213      	str	r3, [r2, #32]
 8000ac4:	e02d      	b.n	8000b22 <HAL_RCC_OscConfig+0x36e>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d10c      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x334>
 8000ace:	4b6a      	ldr	r3, [pc, #424]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000ad0:	6a1b      	ldr	r3, [r3, #32]
 8000ad2:	4a69      	ldr	r2, [pc, #420]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000ad4:	f023 0301 	bic.w	r3, r3, #1
 8000ad8:	6213      	str	r3, [r2, #32]
 8000ada:	4b67      	ldr	r3, [pc, #412]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000adc:	6a1b      	ldr	r3, [r3, #32]
 8000ade:	4a66      	ldr	r2, [pc, #408]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000ae0:	f023 0304 	bic.w	r3, r3, #4
 8000ae4:	6213      	str	r3, [r2, #32]
 8000ae6:	e01c      	b.n	8000b22 <HAL_RCC_OscConfig+0x36e>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	2b05      	cmp	r3, #5
 8000aee:	d10c      	bne.n	8000b0a <HAL_RCC_OscConfig+0x356>
 8000af0:	4b61      	ldr	r3, [pc, #388]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000af2:	6a1b      	ldr	r3, [r3, #32]
 8000af4:	4a60      	ldr	r2, [pc, #384]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000af6:	f043 0304 	orr.w	r3, r3, #4
 8000afa:	6213      	str	r3, [r2, #32]
 8000afc:	4b5e      	ldr	r3, [pc, #376]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000afe:	6a1b      	ldr	r3, [r3, #32]
 8000b00:	4a5d      	ldr	r2, [pc, #372]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6213      	str	r3, [r2, #32]
 8000b08:	e00b      	b.n	8000b22 <HAL_RCC_OscConfig+0x36e>
 8000b0a:	4b5b      	ldr	r3, [pc, #364]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000b0c:	6a1b      	ldr	r3, [r3, #32]
 8000b0e:	4a5a      	ldr	r2, [pc, #360]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000b10:	f023 0301 	bic.w	r3, r3, #1
 8000b14:	6213      	str	r3, [r2, #32]
 8000b16:	4b58      	ldr	r3, [pc, #352]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000b18:	6a1b      	ldr	r3, [r3, #32]
 8000b1a:	4a57      	ldr	r2, [pc, #348]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000b1c:	f023 0304 	bic.w	r3, r3, #4
 8000b20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d015      	beq.n	8000b56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b2a:	f7ff fd31 	bl	8000590 <HAL_GetTick>
 8000b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b30:	e00a      	b.n	8000b48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b32:	f7ff fd2d 	bl	8000590 <HAL_GetTick>
 8000b36:	4602      	mov	r2, r0
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d901      	bls.n	8000b48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000b44:	2303      	movs	r3, #3
 8000b46:	e0b1      	b.n	8000cac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b48:	4b4b      	ldr	r3, [pc, #300]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000b4a:	6a1b      	ldr	r3, [r3, #32]
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d0ee      	beq.n	8000b32 <HAL_RCC_OscConfig+0x37e>
 8000b54:	e014      	b.n	8000b80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b56:	f7ff fd1b 	bl	8000590 <HAL_GetTick>
 8000b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b5c:	e00a      	b.n	8000b74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b5e:	f7ff fd17 	bl	8000590 <HAL_GetTick>
 8000b62:	4602      	mov	r2, r0
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d901      	bls.n	8000b74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b70:	2303      	movs	r3, #3
 8000b72:	e09b      	b.n	8000cac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b74:	4b40      	ldr	r3, [pc, #256]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000b76:	6a1b      	ldr	r3, [r3, #32]
 8000b78:	f003 0302 	and.w	r3, r3, #2
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1ee      	bne.n	8000b5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b80:	7dfb      	ldrb	r3, [r7, #23]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d105      	bne.n	8000b92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b86:	4b3c      	ldr	r3, [pc, #240]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	4a3b      	ldr	r2, [pc, #236]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000b8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000b90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f000 8087 	beq.w	8000caa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b9c:	4b36      	ldr	r3, [pc, #216]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f003 030c 	and.w	r3, r3, #12
 8000ba4:	2b08      	cmp	r3, #8
 8000ba6:	d061      	beq.n	8000c6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	69db      	ldr	r3, [r3, #28]
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d146      	bne.n	8000c3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bb0:	4b33      	ldr	r3, [pc, #204]	@ (8000c80 <HAL_RCC_OscConfig+0x4cc>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb6:	f7ff fceb 	bl	8000590 <HAL_GetTick>
 8000bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bbc:	e008      	b.n	8000bd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bbe:	f7ff fce7 	bl	8000590 <HAL_GetTick>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d901      	bls.n	8000bd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	e06d      	b.n	8000cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bd0:	4b29      	ldr	r3, [pc, #164]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1f0      	bne.n	8000bbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6a1b      	ldr	r3, [r3, #32]
 8000be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000be4:	d108      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000be6:	4b24      	ldr	r3, [pc, #144]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	4921      	ldr	r1, [pc, #132]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6a19      	ldr	r1, [r3, #32]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c08:	430b      	orrs	r3, r1
 8000c0a:	491b      	ldr	r1, [pc, #108]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c10:	4b1b      	ldr	r3, [pc, #108]	@ (8000c80 <HAL_RCC_OscConfig+0x4cc>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c16:	f7ff fcbb 	bl	8000590 <HAL_GetTick>
 8000c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c1c:	e008      	b.n	8000c30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c1e:	f7ff fcb7 	bl	8000590 <HAL_GetTick>
 8000c22:	4602      	mov	r2, r0
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d901      	bls.n	8000c30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	e03d      	b.n	8000cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c30:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d0f0      	beq.n	8000c1e <HAL_RCC_OscConfig+0x46a>
 8000c3c:	e035      	b.n	8000caa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c3e:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <HAL_RCC_OscConfig+0x4cc>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c44:	f7ff fca4 	bl	8000590 <HAL_GetTick>
 8000c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c4a:	e008      	b.n	8000c5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c4c:	f7ff fca0 	bl	8000590 <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d901      	bls.n	8000c5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e026      	b.n	8000cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1f0      	bne.n	8000c4c <HAL_RCC_OscConfig+0x498>
 8000c6a:	e01e      	b.n	8000caa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	69db      	ldr	r3, [r3, #28]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d107      	bne.n	8000c84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	e019      	b.n	8000cac <HAL_RCC_OscConfig+0x4f8>
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40007000 	.word	0x40007000
 8000c80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c84:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <HAL_RCC_OscConfig+0x500>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6a1b      	ldr	r3, [r3, #32]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d106      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d001      	beq.n	8000caa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e000      	b.n	8000cac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000caa:	2300      	movs	r3, #0
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d101      	bne.n	8000ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e0d0      	b.n	8000e6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000ccc:	4b6a      	ldr	r3, [pc, #424]	@ (8000e78 <HAL_RCC_ClockConfig+0x1c0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f003 0307 	and.w	r3, r3, #7
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d910      	bls.n	8000cfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cda:	4b67      	ldr	r3, [pc, #412]	@ (8000e78 <HAL_RCC_ClockConfig+0x1c0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f023 0207 	bic.w	r2, r3, #7
 8000ce2:	4965      	ldr	r1, [pc, #404]	@ (8000e78 <HAL_RCC_ClockConfig+0x1c0>)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cea:	4b63      	ldr	r3, [pc, #396]	@ (8000e78 <HAL_RCC_ClockConfig+0x1c0>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	683a      	ldr	r2, [r7, #0]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d001      	beq.n	8000cfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e0b8      	b.n	8000e6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 0302 	and.w	r3, r3, #2
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d020      	beq.n	8000d4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d005      	beq.n	8000d20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d14:	4b59      	ldr	r3, [pc, #356]	@ (8000e7c <HAL_RCC_ClockConfig+0x1c4>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	4a58      	ldr	r2, [pc, #352]	@ (8000e7c <HAL_RCC_ClockConfig+0x1c4>)
 8000d1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000d1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 0308 	and.w	r3, r3, #8
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d005      	beq.n	8000d38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d2c:	4b53      	ldr	r3, [pc, #332]	@ (8000e7c <HAL_RCC_ClockConfig+0x1c4>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	4a52      	ldr	r2, [pc, #328]	@ (8000e7c <HAL_RCC_ClockConfig+0x1c4>)
 8000d32:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8000d36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d38:	4b50      	ldr	r3, [pc, #320]	@ (8000e7c <HAL_RCC_ClockConfig+0x1c4>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	494d      	ldr	r1, [pc, #308]	@ (8000e7c <HAL_RCC_ClockConfig+0x1c4>)
 8000d46:	4313      	orrs	r3, r2
 8000d48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d040      	beq.n	8000dd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d107      	bne.n	8000d6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d5e:	4b47      	ldr	r3, [pc, #284]	@ (8000e7c <HAL_RCC_ClockConfig+0x1c4>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d115      	bne.n	8000d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e07f      	b.n	8000e6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d107      	bne.n	8000d86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d76:	4b41      	ldr	r3, [pc, #260]	@ (8000e7c <HAL_RCC_ClockConfig+0x1c4>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d109      	bne.n	8000d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e073      	b.n	8000e6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d86:	4b3d      	ldr	r3, [pc, #244]	@ (8000e7c <HAL_RCC_ClockConfig+0x1c4>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d101      	bne.n	8000d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e06b      	b.n	8000e6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d96:	4b39      	ldr	r3, [pc, #228]	@ (8000e7c <HAL_RCC_ClockConfig+0x1c4>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f023 0203 	bic.w	r2, r3, #3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	4936      	ldr	r1, [pc, #216]	@ (8000e7c <HAL_RCC_ClockConfig+0x1c4>)
 8000da4:	4313      	orrs	r3, r2
 8000da6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000da8:	f7ff fbf2 	bl	8000590 <HAL_GetTick>
 8000dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dae:	e00a      	b.n	8000dc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000db0:	f7ff fbee 	bl	8000590 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d901      	bls.n	8000dc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e053      	b.n	8000e6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8000e7c <HAL_RCC_ClockConfig+0x1c4>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 020c 	and.w	r2, r3, #12
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d1eb      	bne.n	8000db0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000dd8:	4b27      	ldr	r3, [pc, #156]	@ (8000e78 <HAL_RCC_ClockConfig+0x1c0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0307 	and.w	r3, r3, #7
 8000de0:	683a      	ldr	r2, [r7, #0]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d210      	bcs.n	8000e08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000de6:	4b24      	ldr	r3, [pc, #144]	@ (8000e78 <HAL_RCC_ClockConfig+0x1c0>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f023 0207 	bic.w	r2, r3, #7
 8000dee:	4922      	ldr	r1, [pc, #136]	@ (8000e78 <HAL_RCC_ClockConfig+0x1c0>)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000df6:	4b20      	ldr	r3, [pc, #128]	@ (8000e78 <HAL_RCC_ClockConfig+0x1c0>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	683a      	ldr	r2, [r7, #0]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d001      	beq.n	8000e08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e032      	b.n	8000e6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d008      	beq.n	8000e26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e14:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <HAL_RCC_ClockConfig+0x1c4>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	4916      	ldr	r1, [pc, #88]	@ (8000e7c <HAL_RCC_ClockConfig+0x1c4>)
 8000e22:	4313      	orrs	r3, r2
 8000e24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d009      	beq.n	8000e46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e32:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <HAL_RCC_ClockConfig+0x1c4>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	691b      	ldr	r3, [r3, #16]
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	490e      	ldr	r1, [pc, #56]	@ (8000e7c <HAL_RCC_ClockConfig+0x1c4>)
 8000e42:	4313      	orrs	r3, r2
 8000e44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e46:	f000 f821 	bl	8000e8c <HAL_RCC_GetSysClockFreq>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e7c <HAL_RCC_ClockConfig+0x1c4>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	091b      	lsrs	r3, r3, #4
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	490a      	ldr	r1, [pc, #40]	@ (8000e80 <HAL_RCC_ClockConfig+0x1c8>)
 8000e58:	5ccb      	ldrb	r3, [r1, r3]
 8000e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e5e:	4a09      	ldr	r2, [pc, #36]	@ (8000e84 <HAL_RCC_ClockConfig+0x1cc>)
 8000e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e62:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <HAL_RCC_ClockConfig+0x1d0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fb50 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40022000 	.word	0x40022000
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	080018dc 	.word	0x080018dc
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000004 	.word	0x20000004

08000e8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b087      	sub	sp, #28
 8000e90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f20 <HAL_RCC_GetSysClockFreq+0x94>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 030c 	and.w	r3, r3, #12
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d002      	beq.n	8000ebc <HAL_RCC_GetSysClockFreq+0x30>
 8000eb6:	2b08      	cmp	r3, #8
 8000eb8:	d003      	beq.n	8000ec2 <HAL_RCC_GetSysClockFreq+0x36>
 8000eba:	e027      	b.n	8000f0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000ebc:	4b19      	ldr	r3, [pc, #100]	@ (8000f24 <HAL_RCC_GetSysClockFreq+0x98>)
 8000ebe:	613b      	str	r3, [r7, #16]
      break;
 8000ec0:	e027      	b.n	8000f12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	0c9b      	lsrs	r3, r3, #18
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	4a17      	ldr	r2, [pc, #92]	@ (8000f28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000ecc:	5cd3      	ldrb	r3, [r2, r3]
 8000ece:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d010      	beq.n	8000efc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000eda:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <HAL_RCC_GetSysClockFreq+0x94>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	0c5b      	lsrs	r3, r3, #17
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	4a11      	ldr	r2, [pc, #68]	@ (8000f2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8000ee6:	5cd3      	ldrb	r3, [r2, r3]
 8000ee8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a0d      	ldr	r2, [pc, #52]	@ (8000f24 <HAL_RCC_GetSysClockFreq+0x98>)
 8000eee:	fb03 f202 	mul.w	r2, r3, r2
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	e004      	b.n	8000f06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a0c      	ldr	r2, [pc, #48]	@ (8000f30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000f00:	fb02 f303 	mul.w	r3, r2, r3
 8000f04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	613b      	str	r3, [r7, #16]
      break;
 8000f0a:	e002      	b.n	8000f12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000f0c:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <HAL_RCC_GetSysClockFreq+0x98>)
 8000f0e:	613b      	str	r3, [r7, #16]
      break;
 8000f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f12:	693b      	ldr	r3, [r7, #16]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	371c      	adds	r7, #28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40021000 	.word	0x40021000
 8000f24:	007a1200 	.word	0x007a1200
 8000f28:	080018ec 	.word	0x080018ec
 8000f2c:	080018fc 	.word	0x080018fc
 8000f30:	003d0900 	.word	0x003d0900

08000f34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <RCC_Delay+0x34>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0a      	ldr	r2, [pc, #40]	@ (8000f6c <RCC_Delay+0x38>)
 8000f42:	fba2 2303 	umull	r2, r3, r2, r3
 8000f46:	0a5b      	lsrs	r3, r3, #9
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	fb02 f303 	mul.w	r3, r2, r3
 8000f4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000f50:	bf00      	nop
  }
  while (Delay --);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	1e5a      	subs	r2, r3, #1
 8000f56:	60fa      	str	r2, [r7, #12]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1f9      	bne.n	8000f50 <RCC_Delay+0x1c>
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	10624dd3 	.word	0x10624dd3

08000f70 <std>:
 8000f70:	2300      	movs	r3, #0
 8000f72:	b510      	push	{r4, lr}
 8000f74:	4604      	mov	r4, r0
 8000f76:	e9c0 3300 	strd	r3, r3, [r0]
 8000f7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000f7e:	6083      	str	r3, [r0, #8]
 8000f80:	8181      	strh	r1, [r0, #12]
 8000f82:	6643      	str	r3, [r0, #100]	@ 0x64
 8000f84:	81c2      	strh	r2, [r0, #14]
 8000f86:	6183      	str	r3, [r0, #24]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	2208      	movs	r2, #8
 8000f8c:	305c      	adds	r0, #92	@ 0x5c
 8000f8e:	f000 f9e7 	bl	8001360 <memset>
 8000f92:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc8 <std+0x58>)
 8000f94:	6224      	str	r4, [r4, #32]
 8000f96:	6263      	str	r3, [r4, #36]	@ 0x24
 8000f98:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <std+0x5c>)
 8000f9a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <std+0x60>)
 8000f9e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <std+0x64>)
 8000fa2:	6323      	str	r3, [r4, #48]	@ 0x30
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <std+0x68>)
 8000fa6:	429c      	cmp	r4, r3
 8000fa8:	d006      	beq.n	8000fb8 <std+0x48>
 8000faa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000fae:	4294      	cmp	r4, r2
 8000fb0:	d002      	beq.n	8000fb8 <std+0x48>
 8000fb2:	33d0      	adds	r3, #208	@ 0xd0
 8000fb4:	429c      	cmp	r4, r3
 8000fb6:	d105      	bne.n	8000fc4 <std+0x54>
 8000fb8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fc0:	f000 ba46 	b.w	8001450 <__retarget_lock_init_recursive>
 8000fc4:	bd10      	pop	{r4, pc}
 8000fc6:	bf00      	nop
 8000fc8:	080011b1 	.word	0x080011b1
 8000fcc:	080011d3 	.word	0x080011d3
 8000fd0:	0800120b 	.word	0x0800120b
 8000fd4:	0800122f 	.word	0x0800122f
 8000fd8:	2000008c 	.word	0x2000008c

08000fdc <stdio_exit_handler>:
 8000fdc:	4a02      	ldr	r2, [pc, #8]	@ (8000fe8 <stdio_exit_handler+0xc>)
 8000fde:	4903      	ldr	r1, [pc, #12]	@ (8000fec <stdio_exit_handler+0x10>)
 8000fe0:	4803      	ldr	r0, [pc, #12]	@ (8000ff0 <stdio_exit_handler+0x14>)
 8000fe2:	f000 b869 	b.w	80010b8 <_fwalk_sglue>
 8000fe6:	bf00      	nop
 8000fe8:	2000000c 	.word	0x2000000c
 8000fec:	08001745 	.word	0x08001745
 8000ff0:	2000001c 	.word	0x2000001c

08000ff4 <cleanup_stdio>:
 8000ff4:	6841      	ldr	r1, [r0, #4]
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <cleanup_stdio+0x34>)
 8000ff8:	b510      	push	{r4, lr}
 8000ffa:	4299      	cmp	r1, r3
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	d001      	beq.n	8001004 <cleanup_stdio+0x10>
 8001000:	f000 fba0 	bl	8001744 <_fflush_r>
 8001004:	68a1      	ldr	r1, [r4, #8]
 8001006:	4b09      	ldr	r3, [pc, #36]	@ (800102c <cleanup_stdio+0x38>)
 8001008:	4299      	cmp	r1, r3
 800100a:	d002      	beq.n	8001012 <cleanup_stdio+0x1e>
 800100c:	4620      	mov	r0, r4
 800100e:	f000 fb99 	bl	8001744 <_fflush_r>
 8001012:	68e1      	ldr	r1, [r4, #12]
 8001014:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <cleanup_stdio+0x3c>)
 8001016:	4299      	cmp	r1, r3
 8001018:	d004      	beq.n	8001024 <cleanup_stdio+0x30>
 800101a:	4620      	mov	r0, r4
 800101c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001020:	f000 bb90 	b.w	8001744 <_fflush_r>
 8001024:	bd10      	pop	{r4, pc}
 8001026:	bf00      	nop
 8001028:	2000008c 	.word	0x2000008c
 800102c:	200000f4 	.word	0x200000f4
 8001030:	2000015c 	.word	0x2000015c

08001034 <global_stdio_init.part.0>:
 8001034:	b510      	push	{r4, lr}
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <global_stdio_init.part.0+0x30>)
 8001038:	4c0b      	ldr	r4, [pc, #44]	@ (8001068 <global_stdio_init.part.0+0x34>)
 800103a:	4a0c      	ldr	r2, [pc, #48]	@ (800106c <global_stdio_init.part.0+0x38>)
 800103c:	4620      	mov	r0, r4
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	2104      	movs	r1, #4
 8001042:	2200      	movs	r2, #0
 8001044:	f7ff ff94 	bl	8000f70 <std>
 8001048:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800104c:	2201      	movs	r2, #1
 800104e:	2109      	movs	r1, #9
 8001050:	f7ff ff8e 	bl	8000f70 <std>
 8001054:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001058:	2202      	movs	r2, #2
 800105a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800105e:	2112      	movs	r1, #18
 8001060:	f7ff bf86 	b.w	8000f70 <std>
 8001064:	200001c4 	.word	0x200001c4
 8001068:	2000008c 	.word	0x2000008c
 800106c:	08000fdd 	.word	0x08000fdd

08001070 <__sfp_lock_acquire>:
 8001070:	4801      	ldr	r0, [pc, #4]	@ (8001078 <__sfp_lock_acquire+0x8>)
 8001072:	f000 b9ee 	b.w	8001452 <__retarget_lock_acquire_recursive>
 8001076:	bf00      	nop
 8001078:	200001cd 	.word	0x200001cd

0800107c <__sfp_lock_release>:
 800107c:	4801      	ldr	r0, [pc, #4]	@ (8001084 <__sfp_lock_release+0x8>)
 800107e:	f000 b9e9 	b.w	8001454 <__retarget_lock_release_recursive>
 8001082:	bf00      	nop
 8001084:	200001cd 	.word	0x200001cd

08001088 <__sinit>:
 8001088:	b510      	push	{r4, lr}
 800108a:	4604      	mov	r4, r0
 800108c:	f7ff fff0 	bl	8001070 <__sfp_lock_acquire>
 8001090:	6a23      	ldr	r3, [r4, #32]
 8001092:	b11b      	cbz	r3, 800109c <__sinit+0x14>
 8001094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001098:	f7ff bff0 	b.w	800107c <__sfp_lock_release>
 800109c:	4b04      	ldr	r3, [pc, #16]	@ (80010b0 <__sinit+0x28>)
 800109e:	6223      	str	r3, [r4, #32]
 80010a0:	4b04      	ldr	r3, [pc, #16]	@ (80010b4 <__sinit+0x2c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1f5      	bne.n	8001094 <__sinit+0xc>
 80010a8:	f7ff ffc4 	bl	8001034 <global_stdio_init.part.0>
 80010ac:	e7f2      	b.n	8001094 <__sinit+0xc>
 80010ae:	bf00      	nop
 80010b0:	08000ff5 	.word	0x08000ff5
 80010b4:	200001c4 	.word	0x200001c4

080010b8 <_fwalk_sglue>:
 80010b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010bc:	4607      	mov	r7, r0
 80010be:	4688      	mov	r8, r1
 80010c0:	4614      	mov	r4, r2
 80010c2:	2600      	movs	r6, #0
 80010c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80010c8:	f1b9 0901 	subs.w	r9, r9, #1
 80010cc:	d505      	bpl.n	80010da <_fwalk_sglue+0x22>
 80010ce:	6824      	ldr	r4, [r4, #0]
 80010d0:	2c00      	cmp	r4, #0
 80010d2:	d1f7      	bne.n	80010c4 <_fwalk_sglue+0xc>
 80010d4:	4630      	mov	r0, r6
 80010d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010da:	89ab      	ldrh	r3, [r5, #12]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d907      	bls.n	80010f0 <_fwalk_sglue+0x38>
 80010e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80010e4:	3301      	adds	r3, #1
 80010e6:	d003      	beq.n	80010f0 <_fwalk_sglue+0x38>
 80010e8:	4629      	mov	r1, r5
 80010ea:	4638      	mov	r0, r7
 80010ec:	47c0      	blx	r8
 80010ee:	4306      	orrs	r6, r0
 80010f0:	3568      	adds	r5, #104	@ 0x68
 80010f2:	e7e9      	b.n	80010c8 <_fwalk_sglue+0x10>

080010f4 <_puts_r>:
 80010f4:	6a03      	ldr	r3, [r0, #32]
 80010f6:	b570      	push	{r4, r5, r6, lr}
 80010f8:	4605      	mov	r5, r0
 80010fa:	460e      	mov	r6, r1
 80010fc:	6884      	ldr	r4, [r0, #8]
 80010fe:	b90b      	cbnz	r3, 8001104 <_puts_r+0x10>
 8001100:	f7ff ffc2 	bl	8001088 <__sinit>
 8001104:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001106:	07db      	lsls	r3, r3, #31
 8001108:	d405      	bmi.n	8001116 <_puts_r+0x22>
 800110a:	89a3      	ldrh	r3, [r4, #12]
 800110c:	0598      	lsls	r0, r3, #22
 800110e:	d402      	bmi.n	8001116 <_puts_r+0x22>
 8001110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001112:	f000 f99e 	bl	8001452 <__retarget_lock_acquire_recursive>
 8001116:	89a3      	ldrh	r3, [r4, #12]
 8001118:	0719      	lsls	r1, r3, #28
 800111a:	d502      	bpl.n	8001122 <_puts_r+0x2e>
 800111c:	6923      	ldr	r3, [r4, #16]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d135      	bne.n	800118e <_puts_r+0x9a>
 8001122:	4621      	mov	r1, r4
 8001124:	4628      	mov	r0, r5
 8001126:	f000 f8c5 	bl	80012b4 <__swsetup_r>
 800112a:	b380      	cbz	r0, 800118e <_puts_r+0x9a>
 800112c:	f04f 35ff 	mov.w	r5, #4294967295
 8001130:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001132:	07da      	lsls	r2, r3, #31
 8001134:	d405      	bmi.n	8001142 <_puts_r+0x4e>
 8001136:	89a3      	ldrh	r3, [r4, #12]
 8001138:	059b      	lsls	r3, r3, #22
 800113a:	d402      	bmi.n	8001142 <_puts_r+0x4e>
 800113c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800113e:	f000 f989 	bl	8001454 <__retarget_lock_release_recursive>
 8001142:	4628      	mov	r0, r5
 8001144:	bd70      	pop	{r4, r5, r6, pc}
 8001146:	2b00      	cmp	r3, #0
 8001148:	da04      	bge.n	8001154 <_puts_r+0x60>
 800114a:	69a2      	ldr	r2, [r4, #24]
 800114c:	429a      	cmp	r2, r3
 800114e:	dc17      	bgt.n	8001180 <_puts_r+0x8c>
 8001150:	290a      	cmp	r1, #10
 8001152:	d015      	beq.n	8001180 <_puts_r+0x8c>
 8001154:	6823      	ldr	r3, [r4, #0]
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	6022      	str	r2, [r4, #0]
 800115a:	7019      	strb	r1, [r3, #0]
 800115c:	68a3      	ldr	r3, [r4, #8]
 800115e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001162:	3b01      	subs	r3, #1
 8001164:	60a3      	str	r3, [r4, #8]
 8001166:	2900      	cmp	r1, #0
 8001168:	d1ed      	bne.n	8001146 <_puts_r+0x52>
 800116a:	2b00      	cmp	r3, #0
 800116c:	da11      	bge.n	8001192 <_puts_r+0x9e>
 800116e:	4622      	mov	r2, r4
 8001170:	210a      	movs	r1, #10
 8001172:	4628      	mov	r0, r5
 8001174:	f000 f85f 	bl	8001236 <__swbuf_r>
 8001178:	3001      	adds	r0, #1
 800117a:	d0d7      	beq.n	800112c <_puts_r+0x38>
 800117c:	250a      	movs	r5, #10
 800117e:	e7d7      	b.n	8001130 <_puts_r+0x3c>
 8001180:	4622      	mov	r2, r4
 8001182:	4628      	mov	r0, r5
 8001184:	f000 f857 	bl	8001236 <__swbuf_r>
 8001188:	3001      	adds	r0, #1
 800118a:	d1e7      	bne.n	800115c <_puts_r+0x68>
 800118c:	e7ce      	b.n	800112c <_puts_r+0x38>
 800118e:	3e01      	subs	r6, #1
 8001190:	e7e4      	b.n	800115c <_puts_r+0x68>
 8001192:	6823      	ldr	r3, [r4, #0]
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	6022      	str	r2, [r4, #0]
 8001198:	220a      	movs	r2, #10
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	e7ee      	b.n	800117c <_puts_r+0x88>
	...

080011a0 <puts>:
 80011a0:	4b02      	ldr	r3, [pc, #8]	@ (80011ac <puts+0xc>)
 80011a2:	4601      	mov	r1, r0
 80011a4:	6818      	ldr	r0, [r3, #0]
 80011a6:	f7ff bfa5 	b.w	80010f4 <_puts_r>
 80011aa:	bf00      	nop
 80011ac:	20000018 	.word	0x20000018

080011b0 <__sread>:
 80011b0:	b510      	push	{r4, lr}
 80011b2:	460c      	mov	r4, r1
 80011b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011b8:	f000 f8fc 	bl	80013b4 <_read_r>
 80011bc:	2800      	cmp	r0, #0
 80011be:	bfab      	itete	ge
 80011c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80011c2:	89a3      	ldrhlt	r3, [r4, #12]
 80011c4:	181b      	addge	r3, r3, r0
 80011c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80011ca:	bfac      	ite	ge
 80011cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80011ce:	81a3      	strhlt	r3, [r4, #12]
 80011d0:	bd10      	pop	{r4, pc}

080011d2 <__swrite>:
 80011d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011d6:	461f      	mov	r7, r3
 80011d8:	898b      	ldrh	r3, [r1, #12]
 80011da:	4605      	mov	r5, r0
 80011dc:	05db      	lsls	r3, r3, #23
 80011de:	460c      	mov	r4, r1
 80011e0:	4616      	mov	r6, r2
 80011e2:	d505      	bpl.n	80011f0 <__swrite+0x1e>
 80011e4:	2302      	movs	r3, #2
 80011e6:	2200      	movs	r2, #0
 80011e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011ec:	f000 f8d0 	bl	8001390 <_lseek_r>
 80011f0:	89a3      	ldrh	r3, [r4, #12]
 80011f2:	4632      	mov	r2, r6
 80011f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80011f8:	81a3      	strh	r3, [r4, #12]
 80011fa:	4628      	mov	r0, r5
 80011fc:	463b      	mov	r3, r7
 80011fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001206:	f000 b8e7 	b.w	80013d8 <_write_r>

0800120a <__sseek>:
 800120a:	b510      	push	{r4, lr}
 800120c:	460c      	mov	r4, r1
 800120e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001212:	f000 f8bd 	bl	8001390 <_lseek_r>
 8001216:	1c43      	adds	r3, r0, #1
 8001218:	89a3      	ldrh	r3, [r4, #12]
 800121a:	bf15      	itete	ne
 800121c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800121e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001222:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001226:	81a3      	strheq	r3, [r4, #12]
 8001228:	bf18      	it	ne
 800122a:	81a3      	strhne	r3, [r4, #12]
 800122c:	bd10      	pop	{r4, pc}

0800122e <__sclose>:
 800122e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001232:	f000 b89d 	b.w	8001370 <_close_r>

08001236 <__swbuf_r>:
 8001236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001238:	460e      	mov	r6, r1
 800123a:	4614      	mov	r4, r2
 800123c:	4605      	mov	r5, r0
 800123e:	b118      	cbz	r0, 8001248 <__swbuf_r+0x12>
 8001240:	6a03      	ldr	r3, [r0, #32]
 8001242:	b90b      	cbnz	r3, 8001248 <__swbuf_r+0x12>
 8001244:	f7ff ff20 	bl	8001088 <__sinit>
 8001248:	69a3      	ldr	r3, [r4, #24]
 800124a:	60a3      	str	r3, [r4, #8]
 800124c:	89a3      	ldrh	r3, [r4, #12]
 800124e:	071a      	lsls	r2, r3, #28
 8001250:	d501      	bpl.n	8001256 <__swbuf_r+0x20>
 8001252:	6923      	ldr	r3, [r4, #16]
 8001254:	b943      	cbnz	r3, 8001268 <__swbuf_r+0x32>
 8001256:	4621      	mov	r1, r4
 8001258:	4628      	mov	r0, r5
 800125a:	f000 f82b 	bl	80012b4 <__swsetup_r>
 800125e:	b118      	cbz	r0, 8001268 <__swbuf_r+0x32>
 8001260:	f04f 37ff 	mov.w	r7, #4294967295
 8001264:	4638      	mov	r0, r7
 8001266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001268:	6823      	ldr	r3, [r4, #0]
 800126a:	6922      	ldr	r2, [r4, #16]
 800126c:	b2f6      	uxtb	r6, r6
 800126e:	1a98      	subs	r0, r3, r2
 8001270:	6963      	ldr	r3, [r4, #20]
 8001272:	4637      	mov	r7, r6
 8001274:	4283      	cmp	r3, r0
 8001276:	dc05      	bgt.n	8001284 <__swbuf_r+0x4e>
 8001278:	4621      	mov	r1, r4
 800127a:	4628      	mov	r0, r5
 800127c:	f000 fa62 	bl	8001744 <_fflush_r>
 8001280:	2800      	cmp	r0, #0
 8001282:	d1ed      	bne.n	8001260 <__swbuf_r+0x2a>
 8001284:	68a3      	ldr	r3, [r4, #8]
 8001286:	3b01      	subs	r3, #1
 8001288:	60a3      	str	r3, [r4, #8]
 800128a:	6823      	ldr	r3, [r4, #0]
 800128c:	1c5a      	adds	r2, r3, #1
 800128e:	6022      	str	r2, [r4, #0]
 8001290:	701e      	strb	r6, [r3, #0]
 8001292:	6962      	ldr	r2, [r4, #20]
 8001294:	1c43      	adds	r3, r0, #1
 8001296:	429a      	cmp	r2, r3
 8001298:	d004      	beq.n	80012a4 <__swbuf_r+0x6e>
 800129a:	89a3      	ldrh	r3, [r4, #12]
 800129c:	07db      	lsls	r3, r3, #31
 800129e:	d5e1      	bpl.n	8001264 <__swbuf_r+0x2e>
 80012a0:	2e0a      	cmp	r6, #10
 80012a2:	d1df      	bne.n	8001264 <__swbuf_r+0x2e>
 80012a4:	4621      	mov	r1, r4
 80012a6:	4628      	mov	r0, r5
 80012a8:	f000 fa4c 	bl	8001744 <_fflush_r>
 80012ac:	2800      	cmp	r0, #0
 80012ae:	d0d9      	beq.n	8001264 <__swbuf_r+0x2e>
 80012b0:	e7d6      	b.n	8001260 <__swbuf_r+0x2a>
	...

080012b4 <__swsetup_r>:
 80012b4:	b538      	push	{r3, r4, r5, lr}
 80012b6:	4b29      	ldr	r3, [pc, #164]	@ (800135c <__swsetup_r+0xa8>)
 80012b8:	4605      	mov	r5, r0
 80012ba:	6818      	ldr	r0, [r3, #0]
 80012bc:	460c      	mov	r4, r1
 80012be:	b118      	cbz	r0, 80012c8 <__swsetup_r+0x14>
 80012c0:	6a03      	ldr	r3, [r0, #32]
 80012c2:	b90b      	cbnz	r3, 80012c8 <__swsetup_r+0x14>
 80012c4:	f7ff fee0 	bl	8001088 <__sinit>
 80012c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012cc:	0719      	lsls	r1, r3, #28
 80012ce:	d422      	bmi.n	8001316 <__swsetup_r+0x62>
 80012d0:	06da      	lsls	r2, r3, #27
 80012d2:	d407      	bmi.n	80012e4 <__swsetup_r+0x30>
 80012d4:	2209      	movs	r2, #9
 80012d6:	602a      	str	r2, [r5, #0]
 80012d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295
 80012e0:	81a3      	strh	r3, [r4, #12]
 80012e2:	e033      	b.n	800134c <__swsetup_r+0x98>
 80012e4:	0758      	lsls	r0, r3, #29
 80012e6:	d512      	bpl.n	800130e <__swsetup_r+0x5a>
 80012e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80012ea:	b141      	cbz	r1, 80012fe <__swsetup_r+0x4a>
 80012ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80012f0:	4299      	cmp	r1, r3
 80012f2:	d002      	beq.n	80012fa <__swsetup_r+0x46>
 80012f4:	4628      	mov	r0, r5
 80012f6:	f000 f8af 	bl	8001458 <_free_r>
 80012fa:	2300      	movs	r3, #0
 80012fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80012fe:	89a3      	ldrh	r3, [r4, #12]
 8001300:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001304:	81a3      	strh	r3, [r4, #12]
 8001306:	2300      	movs	r3, #0
 8001308:	6063      	str	r3, [r4, #4]
 800130a:	6923      	ldr	r3, [r4, #16]
 800130c:	6023      	str	r3, [r4, #0]
 800130e:	89a3      	ldrh	r3, [r4, #12]
 8001310:	f043 0308 	orr.w	r3, r3, #8
 8001314:	81a3      	strh	r3, [r4, #12]
 8001316:	6923      	ldr	r3, [r4, #16]
 8001318:	b94b      	cbnz	r3, 800132e <__swsetup_r+0x7a>
 800131a:	89a3      	ldrh	r3, [r4, #12]
 800131c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001324:	d003      	beq.n	800132e <__swsetup_r+0x7a>
 8001326:	4621      	mov	r1, r4
 8001328:	4628      	mov	r0, r5
 800132a:	f000 fa58 	bl	80017de <__smakebuf_r>
 800132e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001332:	f013 0201 	ands.w	r2, r3, #1
 8001336:	d00a      	beq.n	800134e <__swsetup_r+0x9a>
 8001338:	2200      	movs	r2, #0
 800133a:	60a2      	str	r2, [r4, #8]
 800133c:	6962      	ldr	r2, [r4, #20]
 800133e:	4252      	negs	r2, r2
 8001340:	61a2      	str	r2, [r4, #24]
 8001342:	6922      	ldr	r2, [r4, #16]
 8001344:	b942      	cbnz	r2, 8001358 <__swsetup_r+0xa4>
 8001346:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800134a:	d1c5      	bne.n	80012d8 <__swsetup_r+0x24>
 800134c:	bd38      	pop	{r3, r4, r5, pc}
 800134e:	0799      	lsls	r1, r3, #30
 8001350:	bf58      	it	pl
 8001352:	6962      	ldrpl	r2, [r4, #20]
 8001354:	60a2      	str	r2, [r4, #8]
 8001356:	e7f4      	b.n	8001342 <__swsetup_r+0x8e>
 8001358:	2000      	movs	r0, #0
 800135a:	e7f7      	b.n	800134c <__swsetup_r+0x98>
 800135c:	20000018 	.word	0x20000018

08001360 <memset>:
 8001360:	4603      	mov	r3, r0
 8001362:	4402      	add	r2, r0
 8001364:	4293      	cmp	r3, r2
 8001366:	d100      	bne.n	800136a <memset+0xa>
 8001368:	4770      	bx	lr
 800136a:	f803 1b01 	strb.w	r1, [r3], #1
 800136e:	e7f9      	b.n	8001364 <memset+0x4>

08001370 <_close_r>:
 8001370:	b538      	push	{r3, r4, r5, lr}
 8001372:	2300      	movs	r3, #0
 8001374:	4d05      	ldr	r5, [pc, #20]	@ (800138c <_close_r+0x1c>)
 8001376:	4604      	mov	r4, r0
 8001378:	4608      	mov	r0, r1
 800137a:	602b      	str	r3, [r5, #0]
 800137c:	f7ff f81d 	bl	80003ba <_close>
 8001380:	1c43      	adds	r3, r0, #1
 8001382:	d102      	bne.n	800138a <_close_r+0x1a>
 8001384:	682b      	ldr	r3, [r5, #0]
 8001386:	b103      	cbz	r3, 800138a <_close_r+0x1a>
 8001388:	6023      	str	r3, [r4, #0]
 800138a:	bd38      	pop	{r3, r4, r5, pc}
 800138c:	200001c8 	.word	0x200001c8

08001390 <_lseek_r>:
 8001390:	b538      	push	{r3, r4, r5, lr}
 8001392:	4604      	mov	r4, r0
 8001394:	4608      	mov	r0, r1
 8001396:	4611      	mov	r1, r2
 8001398:	2200      	movs	r2, #0
 800139a:	4d05      	ldr	r5, [pc, #20]	@ (80013b0 <_lseek_r+0x20>)
 800139c:	602a      	str	r2, [r5, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	f7ff f82f 	bl	8000402 <_lseek>
 80013a4:	1c43      	adds	r3, r0, #1
 80013a6:	d102      	bne.n	80013ae <_lseek_r+0x1e>
 80013a8:	682b      	ldr	r3, [r5, #0]
 80013aa:	b103      	cbz	r3, 80013ae <_lseek_r+0x1e>
 80013ac:	6023      	str	r3, [r4, #0]
 80013ae:	bd38      	pop	{r3, r4, r5, pc}
 80013b0:	200001c8 	.word	0x200001c8

080013b4 <_read_r>:
 80013b4:	b538      	push	{r3, r4, r5, lr}
 80013b6:	4604      	mov	r4, r0
 80013b8:	4608      	mov	r0, r1
 80013ba:	4611      	mov	r1, r2
 80013bc:	2200      	movs	r2, #0
 80013be:	4d05      	ldr	r5, [pc, #20]	@ (80013d4 <_read_r+0x20>)
 80013c0:	602a      	str	r2, [r5, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	f7fe ffdc 	bl	8000380 <_read>
 80013c8:	1c43      	adds	r3, r0, #1
 80013ca:	d102      	bne.n	80013d2 <_read_r+0x1e>
 80013cc:	682b      	ldr	r3, [r5, #0]
 80013ce:	b103      	cbz	r3, 80013d2 <_read_r+0x1e>
 80013d0:	6023      	str	r3, [r4, #0]
 80013d2:	bd38      	pop	{r3, r4, r5, pc}
 80013d4:	200001c8 	.word	0x200001c8

080013d8 <_write_r>:
 80013d8:	b538      	push	{r3, r4, r5, lr}
 80013da:	4604      	mov	r4, r0
 80013dc:	4608      	mov	r0, r1
 80013de:	4611      	mov	r1, r2
 80013e0:	2200      	movs	r2, #0
 80013e2:	4d05      	ldr	r5, [pc, #20]	@ (80013f8 <_write_r+0x20>)
 80013e4:	602a      	str	r2, [r5, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	f7fe fed6 	bl	8000198 <_write>
 80013ec:	1c43      	adds	r3, r0, #1
 80013ee:	d102      	bne.n	80013f6 <_write_r+0x1e>
 80013f0:	682b      	ldr	r3, [r5, #0]
 80013f2:	b103      	cbz	r3, 80013f6 <_write_r+0x1e>
 80013f4:	6023      	str	r3, [r4, #0]
 80013f6:	bd38      	pop	{r3, r4, r5, pc}
 80013f8:	200001c8 	.word	0x200001c8

080013fc <__errno>:
 80013fc:	4b01      	ldr	r3, [pc, #4]	@ (8001404 <__errno+0x8>)
 80013fe:	6818      	ldr	r0, [r3, #0]
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000018 	.word	0x20000018

08001408 <__libc_init_array>:
 8001408:	b570      	push	{r4, r5, r6, lr}
 800140a:	2600      	movs	r6, #0
 800140c:	4d0c      	ldr	r5, [pc, #48]	@ (8001440 <__libc_init_array+0x38>)
 800140e:	4c0d      	ldr	r4, [pc, #52]	@ (8001444 <__libc_init_array+0x3c>)
 8001410:	1b64      	subs	r4, r4, r5
 8001412:	10a4      	asrs	r4, r4, #2
 8001414:	42a6      	cmp	r6, r4
 8001416:	d109      	bne.n	800142c <__libc_init_array+0x24>
 8001418:	f000 fa50 	bl	80018bc <_init>
 800141c:	2600      	movs	r6, #0
 800141e:	4d0a      	ldr	r5, [pc, #40]	@ (8001448 <__libc_init_array+0x40>)
 8001420:	4c0a      	ldr	r4, [pc, #40]	@ (800144c <__libc_init_array+0x44>)
 8001422:	1b64      	subs	r4, r4, r5
 8001424:	10a4      	asrs	r4, r4, #2
 8001426:	42a6      	cmp	r6, r4
 8001428:	d105      	bne.n	8001436 <__libc_init_array+0x2e>
 800142a:	bd70      	pop	{r4, r5, r6, pc}
 800142c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001430:	4798      	blx	r3
 8001432:	3601      	adds	r6, #1
 8001434:	e7ee      	b.n	8001414 <__libc_init_array+0xc>
 8001436:	f855 3b04 	ldr.w	r3, [r5], #4
 800143a:	4798      	blx	r3
 800143c:	3601      	adds	r6, #1
 800143e:	e7f2      	b.n	8001426 <__libc_init_array+0x1e>
 8001440:	08001900 	.word	0x08001900
 8001444:	08001900 	.word	0x08001900
 8001448:	08001900 	.word	0x08001900
 800144c:	08001904 	.word	0x08001904

08001450 <__retarget_lock_init_recursive>:
 8001450:	4770      	bx	lr

08001452 <__retarget_lock_acquire_recursive>:
 8001452:	4770      	bx	lr

08001454 <__retarget_lock_release_recursive>:
 8001454:	4770      	bx	lr
	...

08001458 <_free_r>:
 8001458:	b538      	push	{r3, r4, r5, lr}
 800145a:	4605      	mov	r5, r0
 800145c:	2900      	cmp	r1, #0
 800145e:	d040      	beq.n	80014e2 <_free_r+0x8a>
 8001460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001464:	1f0c      	subs	r4, r1, #4
 8001466:	2b00      	cmp	r3, #0
 8001468:	bfb8      	it	lt
 800146a:	18e4      	addlt	r4, r4, r3
 800146c:	f000 f8de 	bl	800162c <__malloc_lock>
 8001470:	4a1c      	ldr	r2, [pc, #112]	@ (80014e4 <_free_r+0x8c>)
 8001472:	6813      	ldr	r3, [r2, #0]
 8001474:	b933      	cbnz	r3, 8001484 <_free_r+0x2c>
 8001476:	6063      	str	r3, [r4, #4]
 8001478:	6014      	str	r4, [r2, #0]
 800147a:	4628      	mov	r0, r5
 800147c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001480:	f000 b8da 	b.w	8001638 <__malloc_unlock>
 8001484:	42a3      	cmp	r3, r4
 8001486:	d908      	bls.n	800149a <_free_r+0x42>
 8001488:	6820      	ldr	r0, [r4, #0]
 800148a:	1821      	adds	r1, r4, r0
 800148c:	428b      	cmp	r3, r1
 800148e:	bf01      	itttt	eq
 8001490:	6819      	ldreq	r1, [r3, #0]
 8001492:	685b      	ldreq	r3, [r3, #4]
 8001494:	1809      	addeq	r1, r1, r0
 8001496:	6021      	streq	r1, [r4, #0]
 8001498:	e7ed      	b.n	8001476 <_free_r+0x1e>
 800149a:	461a      	mov	r2, r3
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	b10b      	cbz	r3, 80014a4 <_free_r+0x4c>
 80014a0:	42a3      	cmp	r3, r4
 80014a2:	d9fa      	bls.n	800149a <_free_r+0x42>
 80014a4:	6811      	ldr	r1, [r2, #0]
 80014a6:	1850      	adds	r0, r2, r1
 80014a8:	42a0      	cmp	r0, r4
 80014aa:	d10b      	bne.n	80014c4 <_free_r+0x6c>
 80014ac:	6820      	ldr	r0, [r4, #0]
 80014ae:	4401      	add	r1, r0
 80014b0:	1850      	adds	r0, r2, r1
 80014b2:	4283      	cmp	r3, r0
 80014b4:	6011      	str	r1, [r2, #0]
 80014b6:	d1e0      	bne.n	800147a <_free_r+0x22>
 80014b8:	6818      	ldr	r0, [r3, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4408      	add	r0, r1
 80014be:	6010      	str	r0, [r2, #0]
 80014c0:	6053      	str	r3, [r2, #4]
 80014c2:	e7da      	b.n	800147a <_free_r+0x22>
 80014c4:	d902      	bls.n	80014cc <_free_r+0x74>
 80014c6:	230c      	movs	r3, #12
 80014c8:	602b      	str	r3, [r5, #0]
 80014ca:	e7d6      	b.n	800147a <_free_r+0x22>
 80014cc:	6820      	ldr	r0, [r4, #0]
 80014ce:	1821      	adds	r1, r4, r0
 80014d0:	428b      	cmp	r3, r1
 80014d2:	bf01      	itttt	eq
 80014d4:	6819      	ldreq	r1, [r3, #0]
 80014d6:	685b      	ldreq	r3, [r3, #4]
 80014d8:	1809      	addeq	r1, r1, r0
 80014da:	6021      	streq	r1, [r4, #0]
 80014dc:	6063      	str	r3, [r4, #4]
 80014de:	6054      	str	r4, [r2, #4]
 80014e0:	e7cb      	b.n	800147a <_free_r+0x22>
 80014e2:	bd38      	pop	{r3, r4, r5, pc}
 80014e4:	200001d4 	.word	0x200001d4

080014e8 <sbrk_aligned>:
 80014e8:	b570      	push	{r4, r5, r6, lr}
 80014ea:	4e0f      	ldr	r6, [pc, #60]	@ (8001528 <sbrk_aligned+0x40>)
 80014ec:	460c      	mov	r4, r1
 80014ee:	6831      	ldr	r1, [r6, #0]
 80014f0:	4605      	mov	r5, r0
 80014f2:	b911      	cbnz	r1, 80014fa <sbrk_aligned+0x12>
 80014f4:	f000 f9d2 	bl	800189c <_sbrk_r>
 80014f8:	6030      	str	r0, [r6, #0]
 80014fa:	4621      	mov	r1, r4
 80014fc:	4628      	mov	r0, r5
 80014fe:	f000 f9cd 	bl	800189c <_sbrk_r>
 8001502:	1c43      	adds	r3, r0, #1
 8001504:	d103      	bne.n	800150e <sbrk_aligned+0x26>
 8001506:	f04f 34ff 	mov.w	r4, #4294967295
 800150a:	4620      	mov	r0, r4
 800150c:	bd70      	pop	{r4, r5, r6, pc}
 800150e:	1cc4      	adds	r4, r0, #3
 8001510:	f024 0403 	bic.w	r4, r4, #3
 8001514:	42a0      	cmp	r0, r4
 8001516:	d0f8      	beq.n	800150a <sbrk_aligned+0x22>
 8001518:	1a21      	subs	r1, r4, r0
 800151a:	4628      	mov	r0, r5
 800151c:	f000 f9be 	bl	800189c <_sbrk_r>
 8001520:	3001      	adds	r0, #1
 8001522:	d1f2      	bne.n	800150a <sbrk_aligned+0x22>
 8001524:	e7ef      	b.n	8001506 <sbrk_aligned+0x1e>
 8001526:	bf00      	nop
 8001528:	200001d0 	.word	0x200001d0

0800152c <_malloc_r>:
 800152c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001530:	1ccd      	adds	r5, r1, #3
 8001532:	f025 0503 	bic.w	r5, r5, #3
 8001536:	3508      	adds	r5, #8
 8001538:	2d0c      	cmp	r5, #12
 800153a:	bf38      	it	cc
 800153c:	250c      	movcc	r5, #12
 800153e:	2d00      	cmp	r5, #0
 8001540:	4606      	mov	r6, r0
 8001542:	db01      	blt.n	8001548 <_malloc_r+0x1c>
 8001544:	42a9      	cmp	r1, r5
 8001546:	d904      	bls.n	8001552 <_malloc_r+0x26>
 8001548:	230c      	movs	r3, #12
 800154a:	6033      	str	r3, [r6, #0]
 800154c:	2000      	movs	r0, #0
 800154e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001552:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001628 <_malloc_r+0xfc>
 8001556:	f000 f869 	bl	800162c <__malloc_lock>
 800155a:	f8d8 3000 	ldr.w	r3, [r8]
 800155e:	461c      	mov	r4, r3
 8001560:	bb44      	cbnz	r4, 80015b4 <_malloc_r+0x88>
 8001562:	4629      	mov	r1, r5
 8001564:	4630      	mov	r0, r6
 8001566:	f7ff ffbf 	bl	80014e8 <sbrk_aligned>
 800156a:	1c43      	adds	r3, r0, #1
 800156c:	4604      	mov	r4, r0
 800156e:	d158      	bne.n	8001622 <_malloc_r+0xf6>
 8001570:	f8d8 4000 	ldr.w	r4, [r8]
 8001574:	4627      	mov	r7, r4
 8001576:	2f00      	cmp	r7, #0
 8001578:	d143      	bne.n	8001602 <_malloc_r+0xd6>
 800157a:	2c00      	cmp	r4, #0
 800157c:	d04b      	beq.n	8001616 <_malloc_r+0xea>
 800157e:	6823      	ldr	r3, [r4, #0]
 8001580:	4639      	mov	r1, r7
 8001582:	4630      	mov	r0, r6
 8001584:	eb04 0903 	add.w	r9, r4, r3
 8001588:	f000 f988 	bl	800189c <_sbrk_r>
 800158c:	4581      	cmp	r9, r0
 800158e:	d142      	bne.n	8001616 <_malloc_r+0xea>
 8001590:	6821      	ldr	r1, [r4, #0]
 8001592:	4630      	mov	r0, r6
 8001594:	1a6d      	subs	r5, r5, r1
 8001596:	4629      	mov	r1, r5
 8001598:	f7ff ffa6 	bl	80014e8 <sbrk_aligned>
 800159c:	3001      	adds	r0, #1
 800159e:	d03a      	beq.n	8001616 <_malloc_r+0xea>
 80015a0:	6823      	ldr	r3, [r4, #0]
 80015a2:	442b      	add	r3, r5
 80015a4:	6023      	str	r3, [r4, #0]
 80015a6:	f8d8 3000 	ldr.w	r3, [r8]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	bb62      	cbnz	r2, 8001608 <_malloc_r+0xdc>
 80015ae:	f8c8 7000 	str.w	r7, [r8]
 80015b2:	e00f      	b.n	80015d4 <_malloc_r+0xa8>
 80015b4:	6822      	ldr	r2, [r4, #0]
 80015b6:	1b52      	subs	r2, r2, r5
 80015b8:	d420      	bmi.n	80015fc <_malloc_r+0xd0>
 80015ba:	2a0b      	cmp	r2, #11
 80015bc:	d917      	bls.n	80015ee <_malloc_r+0xc2>
 80015be:	1961      	adds	r1, r4, r5
 80015c0:	42a3      	cmp	r3, r4
 80015c2:	6025      	str	r5, [r4, #0]
 80015c4:	bf18      	it	ne
 80015c6:	6059      	strne	r1, [r3, #4]
 80015c8:	6863      	ldr	r3, [r4, #4]
 80015ca:	bf08      	it	eq
 80015cc:	f8c8 1000 	streq.w	r1, [r8]
 80015d0:	5162      	str	r2, [r4, r5]
 80015d2:	604b      	str	r3, [r1, #4]
 80015d4:	4630      	mov	r0, r6
 80015d6:	f000 f82f 	bl	8001638 <__malloc_unlock>
 80015da:	f104 000b 	add.w	r0, r4, #11
 80015de:	1d23      	adds	r3, r4, #4
 80015e0:	f020 0007 	bic.w	r0, r0, #7
 80015e4:	1ac2      	subs	r2, r0, r3
 80015e6:	bf1c      	itt	ne
 80015e8:	1a1b      	subne	r3, r3, r0
 80015ea:	50a3      	strne	r3, [r4, r2]
 80015ec:	e7af      	b.n	800154e <_malloc_r+0x22>
 80015ee:	6862      	ldr	r2, [r4, #4]
 80015f0:	42a3      	cmp	r3, r4
 80015f2:	bf0c      	ite	eq
 80015f4:	f8c8 2000 	streq.w	r2, [r8]
 80015f8:	605a      	strne	r2, [r3, #4]
 80015fa:	e7eb      	b.n	80015d4 <_malloc_r+0xa8>
 80015fc:	4623      	mov	r3, r4
 80015fe:	6864      	ldr	r4, [r4, #4]
 8001600:	e7ae      	b.n	8001560 <_malloc_r+0x34>
 8001602:	463c      	mov	r4, r7
 8001604:	687f      	ldr	r7, [r7, #4]
 8001606:	e7b6      	b.n	8001576 <_malloc_r+0x4a>
 8001608:	461a      	mov	r2, r3
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	42a3      	cmp	r3, r4
 800160e:	d1fb      	bne.n	8001608 <_malloc_r+0xdc>
 8001610:	2300      	movs	r3, #0
 8001612:	6053      	str	r3, [r2, #4]
 8001614:	e7de      	b.n	80015d4 <_malloc_r+0xa8>
 8001616:	230c      	movs	r3, #12
 8001618:	4630      	mov	r0, r6
 800161a:	6033      	str	r3, [r6, #0]
 800161c:	f000 f80c 	bl	8001638 <__malloc_unlock>
 8001620:	e794      	b.n	800154c <_malloc_r+0x20>
 8001622:	6005      	str	r5, [r0, #0]
 8001624:	e7d6      	b.n	80015d4 <_malloc_r+0xa8>
 8001626:	bf00      	nop
 8001628:	200001d4 	.word	0x200001d4

0800162c <__malloc_lock>:
 800162c:	4801      	ldr	r0, [pc, #4]	@ (8001634 <__malloc_lock+0x8>)
 800162e:	f7ff bf10 	b.w	8001452 <__retarget_lock_acquire_recursive>
 8001632:	bf00      	nop
 8001634:	200001cc 	.word	0x200001cc

08001638 <__malloc_unlock>:
 8001638:	4801      	ldr	r0, [pc, #4]	@ (8001640 <__malloc_unlock+0x8>)
 800163a:	f7ff bf0b 	b.w	8001454 <__retarget_lock_release_recursive>
 800163e:	bf00      	nop
 8001640:	200001cc 	.word	0x200001cc

08001644 <__sflush_r>:
 8001644:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800164a:	0716      	lsls	r6, r2, #28
 800164c:	4605      	mov	r5, r0
 800164e:	460c      	mov	r4, r1
 8001650:	d454      	bmi.n	80016fc <__sflush_r+0xb8>
 8001652:	684b      	ldr	r3, [r1, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	dc02      	bgt.n	800165e <__sflush_r+0x1a>
 8001658:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800165a:	2b00      	cmp	r3, #0
 800165c:	dd48      	ble.n	80016f0 <__sflush_r+0xac>
 800165e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001660:	2e00      	cmp	r6, #0
 8001662:	d045      	beq.n	80016f0 <__sflush_r+0xac>
 8001664:	2300      	movs	r3, #0
 8001666:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800166a:	682f      	ldr	r7, [r5, #0]
 800166c:	6a21      	ldr	r1, [r4, #32]
 800166e:	602b      	str	r3, [r5, #0]
 8001670:	d030      	beq.n	80016d4 <__sflush_r+0x90>
 8001672:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001674:	89a3      	ldrh	r3, [r4, #12]
 8001676:	0759      	lsls	r1, r3, #29
 8001678:	d505      	bpl.n	8001686 <__sflush_r+0x42>
 800167a:	6863      	ldr	r3, [r4, #4]
 800167c:	1ad2      	subs	r2, r2, r3
 800167e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001680:	b10b      	cbz	r3, 8001686 <__sflush_r+0x42>
 8001682:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001684:	1ad2      	subs	r2, r2, r3
 8001686:	2300      	movs	r3, #0
 8001688:	4628      	mov	r0, r5
 800168a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800168c:	6a21      	ldr	r1, [r4, #32]
 800168e:	47b0      	blx	r6
 8001690:	1c43      	adds	r3, r0, #1
 8001692:	89a3      	ldrh	r3, [r4, #12]
 8001694:	d106      	bne.n	80016a4 <__sflush_r+0x60>
 8001696:	6829      	ldr	r1, [r5, #0]
 8001698:	291d      	cmp	r1, #29
 800169a:	d82b      	bhi.n	80016f4 <__sflush_r+0xb0>
 800169c:	4a28      	ldr	r2, [pc, #160]	@ (8001740 <__sflush_r+0xfc>)
 800169e:	410a      	asrs	r2, r1
 80016a0:	07d6      	lsls	r6, r2, #31
 80016a2:	d427      	bmi.n	80016f4 <__sflush_r+0xb0>
 80016a4:	2200      	movs	r2, #0
 80016a6:	6062      	str	r2, [r4, #4]
 80016a8:	6922      	ldr	r2, [r4, #16]
 80016aa:	04d9      	lsls	r1, r3, #19
 80016ac:	6022      	str	r2, [r4, #0]
 80016ae:	d504      	bpl.n	80016ba <__sflush_r+0x76>
 80016b0:	1c42      	adds	r2, r0, #1
 80016b2:	d101      	bne.n	80016b8 <__sflush_r+0x74>
 80016b4:	682b      	ldr	r3, [r5, #0]
 80016b6:	b903      	cbnz	r3, 80016ba <__sflush_r+0x76>
 80016b8:	6560      	str	r0, [r4, #84]	@ 0x54
 80016ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80016bc:	602f      	str	r7, [r5, #0]
 80016be:	b1b9      	cbz	r1, 80016f0 <__sflush_r+0xac>
 80016c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80016c4:	4299      	cmp	r1, r3
 80016c6:	d002      	beq.n	80016ce <__sflush_r+0x8a>
 80016c8:	4628      	mov	r0, r5
 80016ca:	f7ff fec5 	bl	8001458 <_free_r>
 80016ce:	2300      	movs	r3, #0
 80016d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80016d2:	e00d      	b.n	80016f0 <__sflush_r+0xac>
 80016d4:	2301      	movs	r3, #1
 80016d6:	4628      	mov	r0, r5
 80016d8:	47b0      	blx	r6
 80016da:	4602      	mov	r2, r0
 80016dc:	1c50      	adds	r0, r2, #1
 80016de:	d1c9      	bne.n	8001674 <__sflush_r+0x30>
 80016e0:	682b      	ldr	r3, [r5, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0c6      	beq.n	8001674 <__sflush_r+0x30>
 80016e6:	2b1d      	cmp	r3, #29
 80016e8:	d001      	beq.n	80016ee <__sflush_r+0xaa>
 80016ea:	2b16      	cmp	r3, #22
 80016ec:	d11d      	bne.n	800172a <__sflush_r+0xe6>
 80016ee:	602f      	str	r7, [r5, #0]
 80016f0:	2000      	movs	r0, #0
 80016f2:	e021      	b.n	8001738 <__sflush_r+0xf4>
 80016f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	e01a      	b.n	8001732 <__sflush_r+0xee>
 80016fc:	690f      	ldr	r7, [r1, #16]
 80016fe:	2f00      	cmp	r7, #0
 8001700:	d0f6      	beq.n	80016f0 <__sflush_r+0xac>
 8001702:	0793      	lsls	r3, r2, #30
 8001704:	bf18      	it	ne
 8001706:	2300      	movne	r3, #0
 8001708:	680e      	ldr	r6, [r1, #0]
 800170a:	bf08      	it	eq
 800170c:	694b      	ldreq	r3, [r1, #20]
 800170e:	1bf6      	subs	r6, r6, r7
 8001710:	600f      	str	r7, [r1, #0]
 8001712:	608b      	str	r3, [r1, #8]
 8001714:	2e00      	cmp	r6, #0
 8001716:	ddeb      	ble.n	80016f0 <__sflush_r+0xac>
 8001718:	4633      	mov	r3, r6
 800171a:	463a      	mov	r2, r7
 800171c:	4628      	mov	r0, r5
 800171e:	6a21      	ldr	r1, [r4, #32]
 8001720:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001724:	47e0      	blx	ip
 8001726:	2800      	cmp	r0, #0
 8001728:	dc07      	bgt.n	800173a <__sflush_r+0xf6>
 800172a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800172e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001732:	f04f 30ff 	mov.w	r0, #4294967295
 8001736:	81a3      	strh	r3, [r4, #12]
 8001738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800173a:	4407      	add	r7, r0
 800173c:	1a36      	subs	r6, r6, r0
 800173e:	e7e9      	b.n	8001714 <__sflush_r+0xd0>
 8001740:	dfbffffe 	.word	0xdfbffffe

08001744 <_fflush_r>:
 8001744:	b538      	push	{r3, r4, r5, lr}
 8001746:	690b      	ldr	r3, [r1, #16]
 8001748:	4605      	mov	r5, r0
 800174a:	460c      	mov	r4, r1
 800174c:	b913      	cbnz	r3, 8001754 <_fflush_r+0x10>
 800174e:	2500      	movs	r5, #0
 8001750:	4628      	mov	r0, r5
 8001752:	bd38      	pop	{r3, r4, r5, pc}
 8001754:	b118      	cbz	r0, 800175e <_fflush_r+0x1a>
 8001756:	6a03      	ldr	r3, [r0, #32]
 8001758:	b90b      	cbnz	r3, 800175e <_fflush_r+0x1a>
 800175a:	f7ff fc95 	bl	8001088 <__sinit>
 800175e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f3      	beq.n	800174e <_fflush_r+0xa>
 8001766:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001768:	07d0      	lsls	r0, r2, #31
 800176a:	d404      	bmi.n	8001776 <_fflush_r+0x32>
 800176c:	0599      	lsls	r1, r3, #22
 800176e:	d402      	bmi.n	8001776 <_fflush_r+0x32>
 8001770:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001772:	f7ff fe6e 	bl	8001452 <__retarget_lock_acquire_recursive>
 8001776:	4628      	mov	r0, r5
 8001778:	4621      	mov	r1, r4
 800177a:	f7ff ff63 	bl	8001644 <__sflush_r>
 800177e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001780:	4605      	mov	r5, r0
 8001782:	07da      	lsls	r2, r3, #31
 8001784:	d4e4      	bmi.n	8001750 <_fflush_r+0xc>
 8001786:	89a3      	ldrh	r3, [r4, #12]
 8001788:	059b      	lsls	r3, r3, #22
 800178a:	d4e1      	bmi.n	8001750 <_fflush_r+0xc>
 800178c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800178e:	f7ff fe61 	bl	8001454 <__retarget_lock_release_recursive>
 8001792:	e7dd      	b.n	8001750 <_fflush_r+0xc>

08001794 <__swhatbuf_r>:
 8001794:	b570      	push	{r4, r5, r6, lr}
 8001796:	460c      	mov	r4, r1
 8001798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800179c:	4615      	mov	r5, r2
 800179e:	2900      	cmp	r1, #0
 80017a0:	461e      	mov	r6, r3
 80017a2:	b096      	sub	sp, #88	@ 0x58
 80017a4:	da0c      	bge.n	80017c0 <__swhatbuf_r+0x2c>
 80017a6:	89a3      	ldrh	r3, [r4, #12]
 80017a8:	2100      	movs	r1, #0
 80017aa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80017ae:	bf14      	ite	ne
 80017b0:	2340      	movne	r3, #64	@ 0x40
 80017b2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80017b6:	2000      	movs	r0, #0
 80017b8:	6031      	str	r1, [r6, #0]
 80017ba:	602b      	str	r3, [r5, #0]
 80017bc:	b016      	add	sp, #88	@ 0x58
 80017be:	bd70      	pop	{r4, r5, r6, pc}
 80017c0:	466a      	mov	r2, sp
 80017c2:	f000 f849 	bl	8001858 <_fstat_r>
 80017c6:	2800      	cmp	r0, #0
 80017c8:	dbed      	blt.n	80017a6 <__swhatbuf_r+0x12>
 80017ca:	9901      	ldr	r1, [sp, #4]
 80017cc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80017d0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80017d4:	4259      	negs	r1, r3
 80017d6:	4159      	adcs	r1, r3
 80017d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017dc:	e7eb      	b.n	80017b6 <__swhatbuf_r+0x22>

080017de <__smakebuf_r>:
 80017de:	898b      	ldrh	r3, [r1, #12]
 80017e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80017e2:	079d      	lsls	r5, r3, #30
 80017e4:	4606      	mov	r6, r0
 80017e6:	460c      	mov	r4, r1
 80017e8:	d507      	bpl.n	80017fa <__smakebuf_r+0x1c>
 80017ea:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80017ee:	6023      	str	r3, [r4, #0]
 80017f0:	6123      	str	r3, [r4, #16]
 80017f2:	2301      	movs	r3, #1
 80017f4:	6163      	str	r3, [r4, #20]
 80017f6:	b003      	add	sp, #12
 80017f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017fa:	466a      	mov	r2, sp
 80017fc:	ab01      	add	r3, sp, #4
 80017fe:	f7ff ffc9 	bl	8001794 <__swhatbuf_r>
 8001802:	9f00      	ldr	r7, [sp, #0]
 8001804:	4605      	mov	r5, r0
 8001806:	4639      	mov	r1, r7
 8001808:	4630      	mov	r0, r6
 800180a:	f7ff fe8f 	bl	800152c <_malloc_r>
 800180e:	b948      	cbnz	r0, 8001824 <__smakebuf_r+0x46>
 8001810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001814:	059a      	lsls	r2, r3, #22
 8001816:	d4ee      	bmi.n	80017f6 <__smakebuf_r+0x18>
 8001818:	f023 0303 	bic.w	r3, r3, #3
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	81a3      	strh	r3, [r4, #12]
 8001822:	e7e2      	b.n	80017ea <__smakebuf_r+0xc>
 8001824:	89a3      	ldrh	r3, [r4, #12]
 8001826:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800182a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800182e:	81a3      	strh	r3, [r4, #12]
 8001830:	9b01      	ldr	r3, [sp, #4]
 8001832:	6020      	str	r0, [r4, #0]
 8001834:	b15b      	cbz	r3, 800184e <__smakebuf_r+0x70>
 8001836:	4630      	mov	r0, r6
 8001838:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800183c:	f000 f81e 	bl	800187c <_isatty_r>
 8001840:	b128      	cbz	r0, 800184e <__smakebuf_r+0x70>
 8001842:	89a3      	ldrh	r3, [r4, #12]
 8001844:	f023 0303 	bic.w	r3, r3, #3
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	81a3      	strh	r3, [r4, #12]
 800184e:	89a3      	ldrh	r3, [r4, #12]
 8001850:	431d      	orrs	r5, r3
 8001852:	81a5      	strh	r5, [r4, #12]
 8001854:	e7cf      	b.n	80017f6 <__smakebuf_r+0x18>
	...

08001858 <_fstat_r>:
 8001858:	b538      	push	{r3, r4, r5, lr}
 800185a:	2300      	movs	r3, #0
 800185c:	4d06      	ldr	r5, [pc, #24]	@ (8001878 <_fstat_r+0x20>)
 800185e:	4604      	mov	r4, r0
 8001860:	4608      	mov	r0, r1
 8001862:	4611      	mov	r1, r2
 8001864:	602b      	str	r3, [r5, #0]
 8001866:	f7fe fdb3 	bl	80003d0 <_fstat>
 800186a:	1c43      	adds	r3, r0, #1
 800186c:	d102      	bne.n	8001874 <_fstat_r+0x1c>
 800186e:	682b      	ldr	r3, [r5, #0]
 8001870:	b103      	cbz	r3, 8001874 <_fstat_r+0x1c>
 8001872:	6023      	str	r3, [r4, #0]
 8001874:	bd38      	pop	{r3, r4, r5, pc}
 8001876:	bf00      	nop
 8001878:	200001c8 	.word	0x200001c8

0800187c <_isatty_r>:
 800187c:	b538      	push	{r3, r4, r5, lr}
 800187e:	2300      	movs	r3, #0
 8001880:	4d05      	ldr	r5, [pc, #20]	@ (8001898 <_isatty_r+0x1c>)
 8001882:	4604      	mov	r4, r0
 8001884:	4608      	mov	r0, r1
 8001886:	602b      	str	r3, [r5, #0]
 8001888:	f7fe fdb1 	bl	80003ee <_isatty>
 800188c:	1c43      	adds	r3, r0, #1
 800188e:	d102      	bne.n	8001896 <_isatty_r+0x1a>
 8001890:	682b      	ldr	r3, [r5, #0]
 8001892:	b103      	cbz	r3, 8001896 <_isatty_r+0x1a>
 8001894:	6023      	str	r3, [r4, #0]
 8001896:	bd38      	pop	{r3, r4, r5, pc}
 8001898:	200001c8 	.word	0x200001c8

0800189c <_sbrk_r>:
 800189c:	b538      	push	{r3, r4, r5, lr}
 800189e:	2300      	movs	r3, #0
 80018a0:	4d05      	ldr	r5, [pc, #20]	@ (80018b8 <_sbrk_r+0x1c>)
 80018a2:	4604      	mov	r4, r0
 80018a4:	4608      	mov	r0, r1
 80018a6:	602b      	str	r3, [r5, #0]
 80018a8:	f7fe fdb8 	bl	800041c <_sbrk>
 80018ac:	1c43      	adds	r3, r0, #1
 80018ae:	d102      	bne.n	80018b6 <_sbrk_r+0x1a>
 80018b0:	682b      	ldr	r3, [r5, #0]
 80018b2:	b103      	cbz	r3, 80018b6 <_sbrk_r+0x1a>
 80018b4:	6023      	str	r3, [r4, #0]
 80018b6:	bd38      	pop	{r3, r4, r5, pc}
 80018b8:	200001c8 	.word	0x200001c8

080018bc <_init>:
 80018bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018be:	bf00      	nop
 80018c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018c2:	bc08      	pop	{r3}
 80018c4:	469e      	mov	lr, r3
 80018c6:	4770      	bx	lr

080018c8 <_fini>:
 80018c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ca:	bf00      	nop
 80018cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ce:	bc08      	pop	{r3}
 80018d0:	469e      	mov	lr, r3
 80018d2:	4770      	bx	lr
