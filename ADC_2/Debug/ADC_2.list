
ADC_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f78  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002084  08002084  00003084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020a8  080020a8  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080020a8  080020a8  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020a8  080020a8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020a8  080020a8  000030a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080020ac  080020ac  000030ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080020b0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  2000000c  080020bc  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  080020bc  000040a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004eaa  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001632  00000000  00000000  00008edf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000598  00000000  00000000  0000a518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000419  00000000  00000000  0000aab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164c8  00000000  00000000  0000aec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000072e3  00000000  00000000  00021391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080fa1  00000000  00000000  00028674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a9615  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001470  00000000  00000000  000a9658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000aaac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800206c 	.word	0x0800206c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800206c 	.word	0x0800206c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f9fa 	bl	8000548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f816 	bl	8000184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8de 	bl	8000318 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f8be 	bl	80002dc <MX_DMA_Init>
  MX_ADC1_Init();
 8000160:	f000 f860 	bl	8000224 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)a, 3);
 8000164:	2203      	movs	r2, #3
 8000166:	4905      	ldr	r1, [pc, #20]	@ (800017c <main+0x30>)
 8000168:	4805      	ldr	r0, [pc, #20]	@ (8000180 <main+0x34>)
 800016a:	f000 fb4b 	bl	8000804 <HAL_ADC_Start_DMA>
	  HAL_Delay(500);
 800016e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000172:	f000 fa4b 	bl	800060c <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)a, 3);
 8000176:	bf00      	nop
 8000178:	e7f4      	b.n	8000164 <main+0x18>
 800017a:	bf00      	nop
 800017c:	2000009c 	.word	0x2000009c
 8000180:	20000028 	.word	0x20000028

08000184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b094      	sub	sp, #80	@ 0x50
 8000188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800018e:	2228      	movs	r2, #40	@ 0x28
 8000190:	2100      	movs	r1, #0
 8000192:	4618      	mov	r0, r3
 8000194:	f001 ff3e 	bl	8002014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000198:	f107 0314 	add.w	r3, r7, #20
 800019c:	2200      	movs	r2, #0
 800019e:	601a      	str	r2, [r3, #0]
 80001a0:	605a      	str	r2, [r3, #4]
 80001a2:	609a      	str	r2, [r3, #8]
 80001a4:	60da      	str	r2, [r3, #12]
 80001a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
 80001ae:	605a      	str	r2, [r3, #4]
 80001b0:	609a      	str	r2, [r3, #8]
 80001b2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001b4:	2302      	movs	r3, #2
 80001b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b8:	2301      	movs	r3, #1
 80001ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001bc:	2310      	movs	r3, #16
 80001be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001c0:	2300      	movs	r3, #0
 80001c2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001c8:	4618      	mov	r0, r3
 80001ca:	f001 fa8f 	bl	80016ec <HAL_RCC_OscConfig>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80001d4:	f000 f8b6 	bl	8000344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d8:	230f      	movs	r3, #15
 80001da:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001dc:	2300      	movs	r3, #0
 80001de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001e4:	2300      	movs	r3, #0
 80001e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001ec:	f107 0314 	add.w	r3, r7, #20
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f001 fcfc 	bl	8001bf0 <HAL_RCC_ClockConfig>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d001      	beq.n	8000202 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80001fe:	f000 f8a1 	bl	8000344 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000202:	2302      	movs	r3, #2
 8000204:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000206:	2300      	movs	r3, #0
 8000208:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	4618      	mov	r0, r3
 800020e:	f001 fe4b 	bl	8001ea8 <HAL_RCCEx_PeriphCLKConfig>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d001      	beq.n	800021c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000218:	f000 f894 	bl	8000344 <Error_Handler>
  }
}
 800021c:	bf00      	nop
 800021e:	3750      	adds	r7, #80	@ 0x50
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}

08000224 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000234:	4b27      	ldr	r3, [pc, #156]	@ (80002d4 <MX_ADC1_Init+0xb0>)
 8000236:	4a28      	ldr	r2, [pc, #160]	@ (80002d8 <MX_ADC1_Init+0xb4>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800023a:	4b26      	ldr	r3, [pc, #152]	@ (80002d4 <MX_ADC1_Init+0xb0>)
 800023c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000240:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000242:	4b24      	ldr	r3, [pc, #144]	@ (80002d4 <MX_ADC1_Init+0xb0>)
 8000244:	2200      	movs	r2, #0
 8000246:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000248:	4b22      	ldr	r3, [pc, #136]	@ (80002d4 <MX_ADC1_Init+0xb0>)
 800024a:	2200      	movs	r2, #0
 800024c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800024e:	4b21      	ldr	r3, [pc, #132]	@ (80002d4 <MX_ADC1_Init+0xb0>)
 8000250:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000254:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000256:	4b1f      	ldr	r3, [pc, #124]	@ (80002d4 <MX_ADC1_Init+0xb0>)
 8000258:	2200      	movs	r2, #0
 800025a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 800025c:	4b1d      	ldr	r3, [pc, #116]	@ (80002d4 <MX_ADC1_Init+0xb0>)
 800025e:	2203      	movs	r2, #3
 8000260:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000262:	481c      	ldr	r0, [pc, #112]	@ (80002d4 <MX_ADC1_Init+0xb0>)
 8000264:	f000 f9f6 	bl	8000654 <HAL_ADC_Init>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800026e:	f000 f869 	bl	8000344 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000272:	2300      	movs	r3, #0
 8000274:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000276:	2301      	movs	r3, #1
 8000278:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800027a:	2300      	movs	r3, #0
 800027c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	4619      	mov	r1, r3
 8000282:	4814      	ldr	r0, [pc, #80]	@ (80002d4 <MX_ADC1_Init+0xb0>)
 8000284:	f000 fbb8 	bl	80009f8 <HAL_ADC_ConfigChannel>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800028e:	f000 f859 	bl	8000344 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000292:	2301      	movs	r3, #1
 8000294:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000296:	2302      	movs	r3, #2
 8000298:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4619      	mov	r1, r3
 800029e:	480d      	ldr	r0, [pc, #52]	@ (80002d4 <MX_ADC1_Init+0xb0>)
 80002a0:	f000 fbaa 	bl	80009f8 <HAL_ADC_ConfigChannel>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80002aa:	f000 f84b 	bl	8000344 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80002ae:	2302      	movs	r3, #2
 80002b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002b2:	2303      	movs	r3, #3
 80002b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4619      	mov	r1, r3
 80002ba:	4806      	ldr	r0, [pc, #24]	@ (80002d4 <MX_ADC1_Init+0xb0>)
 80002bc:	f000 fb9c 	bl	80009f8 <HAL_ADC_ConfigChannel>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80002c6:	f000 f83d 	bl	8000344 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000028 	.word	0x20000028
 80002d8:	40012400 	.word	0x40012400

080002dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000314 <MX_DMA_Init+0x38>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000314 <MX_DMA_Init+0x38>)
 80002e8:	f043 0301 	orr.w	r3, r3, #1
 80002ec:	6153      	str	r3, [r2, #20]
 80002ee:	4b09      	ldr	r3, [pc, #36]	@ (8000314 <MX_DMA_Init+0x38>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f003 0301 	and.w	r3, r3, #1
 80002f6:	607b      	str	r3, [r7, #4]
 80002f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2100      	movs	r1, #0
 80002fe:	200b      	movs	r0, #11
 8000300:	f000 fe4b 	bl	8000f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000304:	200b      	movs	r0, #11
 8000306:	f000 fe64 	bl	8000fd2 <HAL_NVIC_EnableIRQ>

}
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	40021000 	.word	0x40021000

08000318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031e:	4b08      	ldr	r3, [pc, #32]	@ (8000340 <MX_GPIO_Init+0x28>)
 8000320:	699b      	ldr	r3, [r3, #24]
 8000322:	4a07      	ldr	r2, [pc, #28]	@ (8000340 <MX_GPIO_Init+0x28>)
 8000324:	f043 0304 	orr.w	r3, r3, #4
 8000328:	6193      	str	r3, [r2, #24]
 800032a:	4b05      	ldr	r3, [pc, #20]	@ (8000340 <MX_GPIO_Init+0x28>)
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	f003 0304 	and.w	r3, r3, #4
 8000332:	607b      	str	r3, [r7, #4]
 8000334:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	bc80      	pop	{r7}
 800033e:	4770      	bx	lr
 8000340:	40021000 	.word	0x40021000

08000344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000348:	b672      	cpsid	i
}
 800034a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800034c:	bf00      	nop
 800034e:	e7fd      	b.n	800034c <Error_Handler+0x8>

08000350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000350:	b480      	push	{r7}
 8000352:	b085      	sub	sp, #20
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000356:	4b15      	ldr	r3, [pc, #84]	@ (80003ac <HAL_MspInit+0x5c>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	4a14      	ldr	r2, [pc, #80]	@ (80003ac <HAL_MspInit+0x5c>)
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	6193      	str	r3, [r2, #24]
 8000362:	4b12      	ldr	r3, [pc, #72]	@ (80003ac <HAL_MspInit+0x5c>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	60bb      	str	r3, [r7, #8]
 800036c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800036e:	4b0f      	ldr	r3, [pc, #60]	@ (80003ac <HAL_MspInit+0x5c>)
 8000370:	69db      	ldr	r3, [r3, #28]
 8000372:	4a0e      	ldr	r2, [pc, #56]	@ (80003ac <HAL_MspInit+0x5c>)
 8000374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000378:	61d3      	str	r3, [r2, #28]
 800037a:	4b0c      	ldr	r3, [pc, #48]	@ (80003ac <HAL_MspInit+0x5c>)
 800037c:	69db      	ldr	r3, [r3, #28]
 800037e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000386:	4b0a      	ldr	r3, [pc, #40]	@ (80003b0 <HAL_MspInit+0x60>)
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800039a:	60fb      	str	r3, [r7, #12]
 800039c:	4a04      	ldr	r2, [pc, #16]	@ (80003b0 <HAL_MspInit+0x60>)
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003a2:	bf00      	nop
 80003a4:	3714      	adds	r7, #20
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	40021000 	.word	0x40021000
 80003b0:	40010000 	.word	0x40010000

080003b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b088      	sub	sp, #32
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003bc:	f107 0310 	add.w	r3, r7, #16
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a28      	ldr	r2, [pc, #160]	@ (8000470 <HAL_ADC_MspInit+0xbc>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d149      	bne.n	8000468 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80003d4:	4b27      	ldr	r3, [pc, #156]	@ (8000474 <HAL_ADC_MspInit+0xc0>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a26      	ldr	r2, [pc, #152]	@ (8000474 <HAL_ADC_MspInit+0xc0>)
 80003da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b24      	ldr	r3, [pc, #144]	@ (8000474 <HAL_ADC_MspInit+0xc0>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80003e8:	60fb      	str	r3, [r7, #12]
 80003ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ec:	4b21      	ldr	r3, [pc, #132]	@ (8000474 <HAL_ADC_MspInit+0xc0>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a20      	ldr	r2, [pc, #128]	@ (8000474 <HAL_ADC_MspInit+0xc0>)
 80003f2:	f043 0304 	orr.w	r3, r3, #4
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000474 <HAL_ADC_MspInit+0xc0>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0304 	and.w	r3, r3, #4
 8000400:	60bb      	str	r3, [r7, #8]
 8000402:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000404:	2307      	movs	r3, #7
 8000406:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000408:	2303      	movs	r3, #3
 800040a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040c:	f107 0310 	add.w	r3, r7, #16
 8000410:	4619      	mov	r1, r3
 8000412:	4819      	ldr	r0, [pc, #100]	@ (8000478 <HAL_ADC_MspInit+0xc4>)
 8000414:	f000 ffe6 	bl	80013e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000418:	4b18      	ldr	r3, [pc, #96]	@ (800047c <HAL_ADC_MspInit+0xc8>)
 800041a:	4a19      	ldr	r2, [pc, #100]	@ (8000480 <HAL_ADC_MspInit+0xcc>)
 800041c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800041e:	4b17      	ldr	r3, [pc, #92]	@ (800047c <HAL_ADC_MspInit+0xc8>)
 8000420:	2200      	movs	r2, #0
 8000422:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000424:	4b15      	ldr	r3, [pc, #84]	@ (800047c <HAL_ADC_MspInit+0xc8>)
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800042a:	4b14      	ldr	r3, [pc, #80]	@ (800047c <HAL_ADC_MspInit+0xc8>)
 800042c:	2280      	movs	r2, #128	@ 0x80
 800042e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000430:	4b12      	ldr	r3, [pc, #72]	@ (800047c <HAL_ADC_MspInit+0xc8>)
 8000432:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000436:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000438:	4b10      	ldr	r3, [pc, #64]	@ (800047c <HAL_ADC_MspInit+0xc8>)
 800043a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800043e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000440:	4b0e      	ldr	r3, [pc, #56]	@ (800047c <HAL_ADC_MspInit+0xc8>)
 8000442:	2220      	movs	r2, #32
 8000444:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000446:	4b0d      	ldr	r3, [pc, #52]	@ (800047c <HAL_ADC_MspInit+0xc8>)
 8000448:	2200      	movs	r2, #0
 800044a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800044c:	480b      	ldr	r0, [pc, #44]	@ (800047c <HAL_ADC_MspInit+0xc8>)
 800044e:	f000 fddb 	bl	8001008 <HAL_DMA_Init>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000458:	f7ff ff74 	bl	8000344 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a07      	ldr	r2, [pc, #28]	@ (800047c <HAL_ADC_MspInit+0xc8>)
 8000460:	621a      	str	r2, [r3, #32]
 8000462:	4a06      	ldr	r2, [pc, #24]	@ (800047c <HAL_ADC_MspInit+0xc8>)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000468:	bf00      	nop
 800046a:	3720      	adds	r7, #32
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40012400 	.word	0x40012400
 8000474:	40021000 	.word	0x40021000
 8000478:	40010800 	.word	0x40010800
 800047c:	20000058 	.word	0x20000058
 8000480:	40020008 	.word	0x40020008

08000484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000488:	bf00      	nop
 800048a:	e7fd      	b.n	8000488 <NMI_Handler+0x4>

0800048c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000490:	bf00      	nop
 8000492:	e7fd      	b.n	8000490 <HardFault_Handler+0x4>

08000494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000498:	bf00      	nop
 800049a:	e7fd      	b.n	8000498 <MemManage_Handler+0x4>

0800049c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004a0:	bf00      	nop
 80004a2:	e7fd      	b.n	80004a0 <BusFault_Handler+0x4>

080004a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a8:	bf00      	nop
 80004aa:	e7fd      	b.n	80004a8 <UsageFault_Handler+0x4>

080004ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr

080004c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004d4:	f000 f87e 	bl	80005d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}

080004dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80004e0:	4802      	ldr	r0, [pc, #8]	@ (80004ec <DMA1_Channel1_IRQHandler+0x10>)
 80004e2:	f000 fe4b 	bl	800117c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000058 	.word	0x20000058

080004f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr

080004fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004fc:	f7ff fff8 	bl	80004f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000500:	480b      	ldr	r0, [pc, #44]	@ (8000530 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000502:	490c      	ldr	r1, [pc, #48]	@ (8000534 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000504:	4a0c      	ldr	r2, [pc, #48]	@ (8000538 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000508:	e002      	b.n	8000510 <LoopCopyDataInit>

0800050a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800050c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050e:	3304      	adds	r3, #4

08000510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000514:	d3f9      	bcc.n	800050a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000516:	4a09      	ldr	r2, [pc, #36]	@ (800053c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000518:	4c09      	ldr	r4, [pc, #36]	@ (8000540 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800051c:	e001      	b.n	8000522 <LoopFillZerobss>

0800051e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800051e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000520:	3204      	adds	r2, #4

08000522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000524:	d3fb      	bcc.n	800051e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000526:	f001 fd7d 	bl	8002024 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800052a:	f7ff fe0f 	bl	800014c <main>
  bx lr
 800052e:	4770      	bx	lr
  ldr r0, =_sdata
 8000530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000534:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000538:	080020b0 	.word	0x080020b0
  ldr r2, =_sbss
 800053c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000540:	200000a8 	.word	0x200000a8

08000544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000544:	e7fe      	b.n	8000544 <ADC1_2_IRQHandler>
	...

08000548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800054c:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <HAL_Init+0x28>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a07      	ldr	r2, [pc, #28]	@ (8000570 <HAL_Init+0x28>)
 8000552:	f043 0310 	orr.w	r3, r3, #16
 8000556:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000558:	2003      	movs	r0, #3
 800055a:	f000 fd13 	bl	8000f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800055e:	200f      	movs	r0, #15
 8000560:	f000 f808 	bl	8000574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000564:	f7ff fef4 	bl	8000350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000568:	2300      	movs	r3, #0
}
 800056a:	4618      	mov	r0, r3
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40022000 	.word	0x40022000

08000574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800057c:	4b12      	ldr	r3, [pc, #72]	@ (80005c8 <HAL_InitTick+0x54>)
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	4b12      	ldr	r3, [pc, #72]	@ (80005cc <HAL_InitTick+0x58>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	4619      	mov	r1, r3
 8000586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800058a:	fbb3 f3f1 	udiv	r3, r3, r1
 800058e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000592:	4618      	mov	r0, r3
 8000594:	f000 fd2b 	bl	8000fee <HAL_SYSTICK_Config>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
 80005a0:	e00e      	b.n	80005c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2b0f      	cmp	r3, #15
 80005a6:	d80a      	bhi.n	80005be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a8:	2200      	movs	r2, #0
 80005aa:	6879      	ldr	r1, [r7, #4]
 80005ac:	f04f 30ff 	mov.w	r0, #4294967295
 80005b0:	f000 fcf3 	bl	8000f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b4:	4a06      	ldr	r2, [pc, #24]	@ (80005d0 <HAL_InitTick+0x5c>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ba:	2300      	movs	r3, #0
 80005bc:	e000      	b.n	80005c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005be:	2301      	movs	r3, #1
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000000 	.word	0x20000000
 80005cc:	20000008 	.word	0x20000008
 80005d0:	20000004 	.word	0x20000004

080005d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d8:	4b05      	ldr	r3, [pc, #20]	@ (80005f0 <HAL_IncTick+0x1c>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	461a      	mov	r2, r3
 80005de:	4b05      	ldr	r3, [pc, #20]	@ (80005f4 <HAL_IncTick+0x20>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	4a03      	ldr	r2, [pc, #12]	@ (80005f4 <HAL_IncTick+0x20>)
 80005e6:	6013      	str	r3, [r2, #0]
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	20000008 	.word	0x20000008
 80005f4:	200000a4 	.word	0x200000a4

080005f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  return uwTick;
 80005fc:	4b02      	ldr	r3, [pc, #8]	@ (8000608 <HAL_GetTick+0x10>)
 80005fe:	681b      	ldr	r3, [r3, #0]
}
 8000600:	4618      	mov	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	200000a4 	.word	0x200000a4

0800060c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000614:	f7ff fff0 	bl	80005f8 <HAL_GetTick>
 8000618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000624:	d005      	beq.n	8000632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000626:	4b0a      	ldr	r3, [pc, #40]	@ (8000650 <HAL_Delay+0x44>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	461a      	mov	r2, r3
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4413      	add	r3, r2
 8000630:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000632:	bf00      	nop
 8000634:	f7ff ffe0 	bl	80005f8 <HAL_GetTick>
 8000638:	4602      	mov	r2, r0
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	68fa      	ldr	r2, [r7, #12]
 8000640:	429a      	cmp	r2, r3
 8000642:	d8f7      	bhi.n	8000634 <HAL_Delay+0x28>
  {
  }
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000008 	.word	0x20000008

08000654 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800065c:	2300      	movs	r3, #0
 800065e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d101      	bne.n	8000676 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000672:	2301      	movs	r3, #1
 8000674:	e0be      	b.n	80007f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000680:	2b00      	cmp	r3, #0
 8000682:	d109      	bne.n	8000698 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2200      	movs	r2, #0
 8000688:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2200      	movs	r2, #0
 800068e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f7ff fe8e 	bl	80003b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f000 faff 	bl	8000c9c <ADC_ConversionStop_Disable>
 800069e:	4603      	mov	r3, r0
 80006a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006a6:	f003 0310 	and.w	r3, r3, #16
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	f040 8099 	bne.w	80007e2 <HAL_ADC_Init+0x18e>
 80006b0:	7dfb      	ldrb	r3, [r7, #23]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	f040 8095 	bne.w	80007e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006bc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80006c0:	f023 0302 	bic.w	r3, r3, #2
 80006c4:	f043 0202 	orr.w	r2, r3, #2
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80006d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7b1b      	ldrb	r3, [r3, #12]
 80006da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80006dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80006ec:	d003      	beq.n	80006f6 <HAL_ADC_Init+0xa2>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d102      	bne.n	80006fc <HAL_ADC_Init+0xa8>
 80006f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006fa:	e000      	b.n	80006fe <HAL_ADC_Init+0xaa>
 80006fc:	2300      	movs	r3, #0
 80006fe:	693a      	ldr	r2, [r7, #16]
 8000700:	4313      	orrs	r3, r2
 8000702:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	7d1b      	ldrb	r3, [r3, #20]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d119      	bne.n	8000740 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	7b1b      	ldrb	r3, [r3, #12]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d109      	bne.n	8000728 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	3b01      	subs	r3, #1
 800071a:	035a      	lsls	r2, r3, #13
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	4313      	orrs	r3, r2
 8000720:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	e00b      	b.n	8000740 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800072c:	f043 0220 	orr.w	r2, r3, #32
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000738:	f043 0201 	orr.w	r2, r3, #1
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	430a      	orrs	r2, r1
 8000752:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	689a      	ldr	r2, [r3, #8]
 800075a:	4b28      	ldr	r3, [pc, #160]	@ (80007fc <HAL_ADC_Init+0x1a8>)
 800075c:	4013      	ands	r3, r2
 800075e:	687a      	ldr	r2, [r7, #4]
 8000760:	6812      	ldr	r2, [r2, #0]
 8000762:	68b9      	ldr	r1, [r7, #8]
 8000764:	430b      	orrs	r3, r1
 8000766:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000770:	d003      	beq.n	800077a <HAL_ADC_Init+0x126>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d104      	bne.n	8000784 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	691b      	ldr	r3, [r3, #16]
 800077e:	3b01      	subs	r3, #1
 8000780:	051b      	lsls	r3, r3, #20
 8000782:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800078a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	68fa      	ldr	r2, [r7, #12]
 8000794:	430a      	orrs	r2, r1
 8000796:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	689a      	ldr	r2, [r3, #8]
 800079e:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <HAL_ADC_Init+0x1ac>)
 80007a0:	4013      	ands	r3, r2
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d10b      	bne.n	80007c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2200      	movs	r2, #0
 80007ac:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007b2:	f023 0303 	bic.w	r3, r3, #3
 80007b6:	f043 0201 	orr.w	r2, r3, #1
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80007be:	e018      	b.n	80007f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007c4:	f023 0312 	bic.w	r3, r3, #18
 80007c8:	f043 0210 	orr.w	r2, r3, #16
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007d4:	f043 0201 	orr.w	r2, r3, #1
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80007dc:	2301      	movs	r3, #1
 80007de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80007e0:	e007      	b.n	80007f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007e6:	f043 0210 	orr.w	r2, r3, #16
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
 80007f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80007f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	ffe1f7fd 	.word	0xffe1f7fd
 8000800:	ff1f0efe 	.word	0xff1f0efe

08000804 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000810:	2300      	movs	r3, #0
 8000812:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a64      	ldr	r2, [pc, #400]	@ (80009ac <HAL_ADC_Start_DMA+0x1a8>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d004      	beq.n	8000828 <HAL_ADC_Start_DMA+0x24>
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a63      	ldr	r2, [pc, #396]	@ (80009b0 <HAL_ADC_Start_DMA+0x1ac>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d106      	bne.n	8000836 <HAL_ADC_Start_DMA+0x32>
 8000828:	4b60      	ldr	r3, [pc, #384]	@ (80009ac <HAL_ADC_Start_DMA+0x1a8>)
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000830:	2b00      	cmp	r3, #0
 8000832:	f040 80b3 	bne.w	800099c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800083c:	2b01      	cmp	r3, #1
 800083e:	d101      	bne.n	8000844 <HAL_ADC_Start_DMA+0x40>
 8000840:	2302      	movs	r3, #2
 8000842:	e0ae      	b.n	80009a2 <HAL_ADC_Start_DMA+0x19e>
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	2201      	movs	r2, #1
 8000848:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800084c:	68f8      	ldr	r0, [r7, #12]
 800084e:	f000 f9cb 	bl	8000be8 <ADC_Enable>
 8000852:	4603      	mov	r3, r0
 8000854:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000856:	7dfb      	ldrb	r3, [r7, #23]
 8000858:	2b00      	cmp	r3, #0
 800085a:	f040 809a 	bne.w	8000992 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000862:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000866:	f023 0301 	bic.w	r3, r3, #1
 800086a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a4e      	ldr	r2, [pc, #312]	@ (80009b0 <HAL_ADC_Start_DMA+0x1ac>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d105      	bne.n	8000888 <HAL_ADC_Start_DMA+0x84>
 800087c:	4b4b      	ldr	r3, [pc, #300]	@ (80009ac <HAL_ADC_Start_DMA+0x1a8>)
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000884:	2b00      	cmp	r3, #0
 8000886:	d115      	bne.n	80008b4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800088c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d026      	beq.n	80008f0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80008aa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80008b2:	e01d      	b.n	80008f0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008b8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a39      	ldr	r2, [pc, #228]	@ (80009ac <HAL_ADC_Start_DMA+0x1a8>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d004      	beq.n	80008d4 <HAL_ADC_Start_DMA+0xd0>
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a38      	ldr	r2, [pc, #224]	@ (80009b0 <HAL_ADC_Start_DMA+0x1ac>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d10d      	bne.n	80008f0 <HAL_ADC_Start_DMA+0xec>
 80008d4:	4b35      	ldr	r3, [pc, #212]	@ (80009ac <HAL_ADC_Start_DMA+0x1a8>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d007      	beq.n	80008f0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80008e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d006      	beq.n	800090a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000900:	f023 0206 	bic.w	r2, r3, #6
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000908:	e002      	b.n	8000910 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	2200      	movs	r2, #0
 800090e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2200      	movs	r2, #0
 8000914:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	6a1b      	ldr	r3, [r3, #32]
 800091c:	4a25      	ldr	r2, [pc, #148]	@ (80009b4 <HAL_ADC_Start_DMA+0x1b0>)
 800091e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	6a1b      	ldr	r3, [r3, #32]
 8000924:	4a24      	ldr	r2, [pc, #144]	@ (80009b8 <HAL_ADC_Start_DMA+0x1b4>)
 8000926:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	6a1b      	ldr	r3, [r3, #32]
 800092c:	4a23      	ldr	r2, [pc, #140]	@ (80009bc <HAL_ADC_Start_DMA+0x1b8>)
 800092e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f06f 0202 	mvn.w	r2, #2
 8000938:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	689a      	ldr	r2, [r3, #8]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000948:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	6a18      	ldr	r0, [r3, #32]
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	334c      	adds	r3, #76	@ 0x4c
 8000954:	4619      	mov	r1, r3
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f000 fbaf 	bl	80010bc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000968:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800096c:	d108      	bne.n	8000980 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	689a      	ldr	r2, [r3, #8]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800097c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800097e:	e00f      	b.n	80009a0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	689a      	ldr	r2, [r3, #8]
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800098e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000990:	e006      	b.n	80009a0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	2200      	movs	r2, #0
 8000996:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800099a:	e001      	b.n	80009a0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800099c:	2301      	movs	r3, #1
 800099e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80009a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40012400 	.word	0x40012400
 80009b0:	40012800 	.word	0x40012800
 80009b4:	08000d1f 	.word	0x08000d1f
 80009b8:	08000d9b 	.word	0x08000d9b
 80009bc:	08000db7 	.word	0x08000db7

080009c0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr

080009d2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b083      	sub	sp, #12
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr

080009e4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
	...

080009f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d101      	bne.n	8000a18 <HAL_ADC_ConfigChannel+0x20>
 8000a14:	2302      	movs	r3, #2
 8000a16:	e0dc      	b.n	8000bd2 <HAL_ADC_ConfigChannel+0x1da>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	2b06      	cmp	r3, #6
 8000a26:	d81c      	bhi.n	8000a62 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685a      	ldr	r2, [r3, #4]
 8000a32:	4613      	mov	r3, r2
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	4413      	add	r3, r2
 8000a38:	3b05      	subs	r3, #5
 8000a3a:	221f      	movs	r2, #31
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	4019      	ands	r1, r3
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	6818      	ldr	r0, [r3, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685a      	ldr	r2, [r3, #4]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	4413      	add	r3, r2
 8000a52:	3b05      	subs	r3, #5
 8000a54:	fa00 f203 	lsl.w	r2, r0, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a60:	e03c      	b.n	8000adc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	2b0c      	cmp	r3, #12
 8000a68:	d81c      	bhi.n	8000aa4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685a      	ldr	r2, [r3, #4]
 8000a74:	4613      	mov	r3, r2
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	4413      	add	r3, r2
 8000a7a:	3b23      	subs	r3, #35	@ 0x23
 8000a7c:	221f      	movs	r2, #31
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	43db      	mvns	r3, r3
 8000a84:	4019      	ands	r1, r3
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	6818      	ldr	r0, [r3, #0]
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685a      	ldr	r2, [r3, #4]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	4413      	add	r3, r2
 8000a94:	3b23      	subs	r3, #35	@ 0x23
 8000a96:	fa00 f203 	lsl.w	r2, r0, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	631a      	str	r2, [r3, #48]	@ 0x30
 8000aa2:	e01b      	b.n	8000adc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685a      	ldr	r2, [r3, #4]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4413      	add	r3, r2
 8000ab4:	3b41      	subs	r3, #65	@ 0x41
 8000ab6:	221f      	movs	r2, #31
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	4019      	ands	r1, r3
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	6818      	ldr	r0, [r3, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685a      	ldr	r2, [r3, #4]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	4413      	add	r3, r2
 8000ace:	3b41      	subs	r3, #65	@ 0x41
 8000ad0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b09      	cmp	r3, #9
 8000ae2:	d91c      	bls.n	8000b1e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	68d9      	ldr	r1, [r3, #12]
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	4613      	mov	r3, r2
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	4413      	add	r3, r2
 8000af4:	3b1e      	subs	r3, #30
 8000af6:	2207      	movs	r2, #7
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	43db      	mvns	r3, r3
 8000afe:	4019      	ands	r1, r3
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	6898      	ldr	r0, [r3, #8]
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	4413      	add	r3, r2
 8000b0e:	3b1e      	subs	r3, #30
 8000b10:	fa00 f203 	lsl.w	r2, r0, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	e019      	b.n	8000b52 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	6919      	ldr	r1, [r3, #16]
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	4413      	add	r3, r2
 8000b2e:	2207      	movs	r2, #7
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	4019      	ands	r1, r3
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	6898      	ldr	r0, [r3, #8]
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	fa00 f203 	lsl.w	r2, r0, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2b10      	cmp	r3, #16
 8000b58:	d003      	beq.n	8000b62 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b5e:	2b11      	cmp	r3, #17
 8000b60:	d132      	bne.n	8000bc8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a1d      	ldr	r2, [pc, #116]	@ (8000bdc <HAL_ADC_ConfigChannel+0x1e4>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d125      	bne.n	8000bb8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d126      	bne.n	8000bc8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	689a      	ldr	r2, [r3, #8]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000b88:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2b10      	cmp	r3, #16
 8000b90:	d11a      	bne.n	8000bc8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b92:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a13      	ldr	r2, [pc, #76]	@ (8000be4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000b98:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9c:	0c9a      	lsrs	r2, r3, #18
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4413      	add	r3, r2
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ba8:	e002      	b.n	8000bb0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d1f9      	bne.n	8000baa <HAL_ADC_ConfigChannel+0x1b2>
 8000bb6:	e007      	b.n	8000bc8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bbc:	f043 0220 	orr.w	r2, r3, #32
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr
 8000bdc:	40012400 	.word	0x40012400
 8000be0:	20000000 	.word	0x20000000
 8000be4:	431bde83 	.word	0x431bde83

08000be8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d040      	beq.n	8000c88 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	689a      	ldr	r2, [r3, #8]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f042 0201 	orr.w	r2, r2, #1
 8000c14:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c16:	4b1f      	ldr	r3, [pc, #124]	@ (8000c94 <ADC_Enable+0xac>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a1f      	ldr	r2, [pc, #124]	@ (8000c98 <ADC_Enable+0xb0>)
 8000c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c20:	0c9b      	lsrs	r3, r3, #18
 8000c22:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000c24:	e002      	b.n	8000c2c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d1f9      	bne.n	8000c26 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000c32:	f7ff fce1 	bl	80005f8 <HAL_GetTick>
 8000c36:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000c38:	e01f      	b.n	8000c7a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000c3a:	f7ff fcdd 	bl	80005f8 <HAL_GetTick>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d918      	bls.n	8000c7a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d011      	beq.n	8000c7a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c5a:	f043 0210 	orr.w	r2, r3, #16
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c66:	f043 0201 	orr.w	r2, r3, #1
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e007      	b.n	8000c8a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d1d8      	bne.n	8000c3a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000000 	.word	0x20000000
 8000c98:	431bde83 	.word	0x431bde83

08000c9c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d12e      	bne.n	8000d14 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f022 0201 	bic.w	r2, r2, #1
 8000cc4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000cc6:	f7ff fc97 	bl	80005f8 <HAL_GetTick>
 8000cca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ccc:	e01b      	b.n	8000d06 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000cce:	f7ff fc93 	bl	80005f8 <HAL_GetTick>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d914      	bls.n	8000d06 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d10d      	bne.n	8000d06 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cee:	f043 0210 	orr.w	r2, r3, #16
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cfa:	f043 0201 	orr.w	r2, r3, #1
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e007      	b.n	8000d16 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d0dc      	beq.n	8000cce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b084      	sub	sp, #16
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d2a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d30:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d127      	bne.n	8000d88 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d3c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000d4e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000d52:	d115      	bne.n	8000d80 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d111      	bne.n	8000d80 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d105      	bne.n	8000d80 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d78:	f043 0201 	orr.w	r2, r3, #1
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000d80:	68f8      	ldr	r0, [r7, #12]
 8000d82:	f7ff fe1d 	bl	80009c0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000d86:	e004      	b.n	8000d92 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	6a1b      	ldr	r3, [r3, #32]
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	4798      	blx	r3
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b084      	sub	sp, #16
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000da6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000da8:	68f8      	ldr	r0, [r7, #12]
 8000daa:	f7ff fe12 	bl	80009d2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b084      	sub	sp, #16
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dc2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dc8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dd4:	f043 0204 	orr.w	r2, r3, #4
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000ddc:	68f8      	ldr	r0, [r7, #12]
 8000dde:	f7ff fe01 	bl	80009e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1e:	4a04      	ldr	r2, [pc, #16]	@ (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	60d3      	str	r3, [r2, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e38:	4b04      	ldr	r3, [pc, #16]	@ (8000e4c <__NVIC_GetPriorityGrouping+0x18>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	f003 0307 	and.w	r3, r3, #7
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	db0b      	blt.n	8000e7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	f003 021f 	and.w	r2, r3, #31
 8000e68:	4906      	ldr	r1, [pc, #24]	@ (8000e84 <__NVIC_EnableIRQ+0x34>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	095b      	lsrs	r3, r3, #5
 8000e70:	2001      	movs	r0, #1
 8000e72:	fa00 f202 	lsl.w	r2, r0, r2
 8000e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr
 8000e84:	e000e100 	.word	0xe000e100

08000e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	db0a      	blt.n	8000eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	490c      	ldr	r1, [pc, #48]	@ (8000ed4 <__NVIC_SetPriority+0x4c>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	0112      	lsls	r2, r2, #4
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	440b      	add	r3, r1
 8000eac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb0:	e00a      	b.n	8000ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4908      	ldr	r1, [pc, #32]	@ (8000ed8 <__NVIC_SetPriority+0x50>)
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	f003 030f 	and.w	r3, r3, #15
 8000ebe:	3b04      	subs	r3, #4
 8000ec0:	0112      	lsls	r2, r2, #4
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	761a      	strb	r2, [r3, #24]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000e100 	.word	0xe000e100
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b089      	sub	sp, #36	@ 0x24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f1c3 0307 	rsb	r3, r3, #7
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	bf28      	it	cs
 8000efa:	2304      	movcs	r3, #4
 8000efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3304      	adds	r3, #4
 8000f02:	2b06      	cmp	r3, #6
 8000f04:	d902      	bls.n	8000f0c <NVIC_EncodePriority+0x30>
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3b03      	subs	r3, #3
 8000f0a:	e000      	b.n	8000f0e <NVIC_EncodePriority+0x32>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	f04f 32ff 	mov.w	r2, #4294967295
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	401a      	ands	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f24:	f04f 31ff 	mov.w	r1, #4294967295
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	43d9      	mvns	r1, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	4313      	orrs	r3, r2
         );
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3724      	adds	r7, #36	@ 0x24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f50:	d301      	bcc.n	8000f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00f      	b.n	8000f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f56:	4a0a      	ldr	r2, [pc, #40]	@ (8000f80 <SysTick_Config+0x40>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5e:	210f      	movs	r1, #15
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	f7ff ff90 	bl	8000e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f68:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <SysTick_Config+0x40>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6e:	4b04      	ldr	r3, [pc, #16]	@ (8000f80 <SysTick_Config+0x40>)
 8000f70:	2207      	movs	r2, #7
 8000f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	e000e010 	.word	0xe000e010

08000f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ff2d 	bl	8000dec <__NVIC_SetPriorityGrouping>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fac:	f7ff ff42 	bl	8000e34 <__NVIC_GetPriorityGrouping>
 8000fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	6978      	ldr	r0, [r7, #20]
 8000fb8:	f7ff ff90 	bl	8000edc <NVIC_EncodePriority>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff5f 	bl	8000e88 <__NVIC_SetPriority>
}
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff35 	bl	8000e50 <__NVIC_EnableIRQ>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff ffa2 	bl	8000f40 <SysTick_Config>
 8000ffc:	4603      	mov	r3, r0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d101      	bne.n	800101e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e043      	b.n	80010a6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	4b22      	ldr	r3, [pc, #136]	@ (80010b0 <HAL_DMA_Init+0xa8>)
 8001026:	4413      	add	r3, r2
 8001028:	4a22      	ldr	r2, [pc, #136]	@ (80010b4 <HAL_DMA_Init+0xac>)
 800102a:	fba2 2303 	umull	r2, r3, r2, r3
 800102e:	091b      	lsrs	r3, r3, #4
 8001030:	009a      	lsls	r2, r3, #2
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a1f      	ldr	r2, [pc, #124]	@ (80010b8 <HAL_DMA_Init+0xb0>)
 800103a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2202      	movs	r2, #2
 8001040:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001052:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001056:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001060:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800106c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001078:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	4313      	orrs	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2201      	movs	r2, #1
 8001098:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	bffdfff8 	.word	0xbffdfff8
 80010b4:	cccccccd 	.word	0xcccccccd
 80010b8:	40020000 	.word	0x40020000

080010bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d101      	bne.n	80010dc <HAL_DMA_Start_IT+0x20>
 80010d8:	2302      	movs	r3, #2
 80010da:	e04b      	b.n	8001174 <HAL_DMA_Start_IT+0xb8>
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2201      	movs	r2, #1
 80010e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d13a      	bne.n	8001166 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2202      	movs	r2, #2
 80010f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2200      	movs	r2, #0
 80010fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 0201 	bic.w	r2, r2, #1
 800110c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	68b9      	ldr	r1, [r7, #8]
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f000 f937 	bl	8001388 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800111e:	2b00      	cmp	r3, #0
 8001120:	d008      	beq.n	8001134 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f042 020e 	orr.w	r2, r2, #14
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	e00f      	b.n	8001154 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f022 0204 	bic.w	r2, r2, #4
 8001142:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 020a 	orr.w	r2, r2, #10
 8001152:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 0201 	orr.w	r2, r2, #1
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	e005      	b.n	8001172 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800116e:	2302      	movs	r3, #2
 8001170:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001172:	7dfb      	ldrb	r3, [r7, #23]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001198:	2204      	movs	r2, #4
 800119a:	409a      	lsls	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4013      	ands	r3, r2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d04f      	beq.n	8001244 <HAL_DMA_IRQHandler+0xc8>
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d04a      	beq.n	8001244 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0320 	and.w	r3, r3, #32
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d107      	bne.n	80011cc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 0204 	bic.w	r2, r2, #4
 80011ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a66      	ldr	r2, [pc, #408]	@ (800136c <HAL_DMA_IRQHandler+0x1f0>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d029      	beq.n	800122a <HAL_DMA_IRQHandler+0xae>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a65      	ldr	r2, [pc, #404]	@ (8001370 <HAL_DMA_IRQHandler+0x1f4>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d022      	beq.n	8001226 <HAL_DMA_IRQHandler+0xaa>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a63      	ldr	r2, [pc, #396]	@ (8001374 <HAL_DMA_IRQHandler+0x1f8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d01a      	beq.n	8001220 <HAL_DMA_IRQHandler+0xa4>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a62      	ldr	r2, [pc, #392]	@ (8001378 <HAL_DMA_IRQHandler+0x1fc>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d012      	beq.n	800121a <HAL_DMA_IRQHandler+0x9e>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a60      	ldr	r2, [pc, #384]	@ (800137c <HAL_DMA_IRQHandler+0x200>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d00a      	beq.n	8001214 <HAL_DMA_IRQHandler+0x98>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a5f      	ldr	r2, [pc, #380]	@ (8001380 <HAL_DMA_IRQHandler+0x204>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d102      	bne.n	800120e <HAL_DMA_IRQHandler+0x92>
 8001208:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800120c:	e00e      	b.n	800122c <HAL_DMA_IRQHandler+0xb0>
 800120e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001212:	e00b      	b.n	800122c <HAL_DMA_IRQHandler+0xb0>
 8001214:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001218:	e008      	b.n	800122c <HAL_DMA_IRQHandler+0xb0>
 800121a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800121e:	e005      	b.n	800122c <HAL_DMA_IRQHandler+0xb0>
 8001220:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001224:	e002      	b.n	800122c <HAL_DMA_IRQHandler+0xb0>
 8001226:	2340      	movs	r3, #64	@ 0x40
 8001228:	e000      	b.n	800122c <HAL_DMA_IRQHandler+0xb0>
 800122a:	2304      	movs	r3, #4
 800122c:	4a55      	ldr	r2, [pc, #340]	@ (8001384 <HAL_DMA_IRQHandler+0x208>)
 800122e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001234:	2b00      	cmp	r3, #0
 8001236:	f000 8094 	beq.w	8001362 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001242:	e08e      	b.n	8001362 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001248:	2202      	movs	r2, #2
 800124a:	409a      	lsls	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d056      	beq.n	8001302 <HAL_DMA_IRQHandler+0x186>
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d051      	beq.n	8001302 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0320 	and.w	r3, r3, #32
 8001268:	2b00      	cmp	r3, #0
 800126a:	d10b      	bne.n	8001284 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 020a 	bic.w	r2, r2, #10
 800127a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2201      	movs	r2, #1
 8001280:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a38      	ldr	r2, [pc, #224]	@ (800136c <HAL_DMA_IRQHandler+0x1f0>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d029      	beq.n	80012e2 <HAL_DMA_IRQHandler+0x166>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a37      	ldr	r2, [pc, #220]	@ (8001370 <HAL_DMA_IRQHandler+0x1f4>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d022      	beq.n	80012de <HAL_DMA_IRQHandler+0x162>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a35      	ldr	r2, [pc, #212]	@ (8001374 <HAL_DMA_IRQHandler+0x1f8>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d01a      	beq.n	80012d8 <HAL_DMA_IRQHandler+0x15c>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a34      	ldr	r2, [pc, #208]	@ (8001378 <HAL_DMA_IRQHandler+0x1fc>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d012      	beq.n	80012d2 <HAL_DMA_IRQHandler+0x156>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a32      	ldr	r2, [pc, #200]	@ (800137c <HAL_DMA_IRQHandler+0x200>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d00a      	beq.n	80012cc <HAL_DMA_IRQHandler+0x150>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a31      	ldr	r2, [pc, #196]	@ (8001380 <HAL_DMA_IRQHandler+0x204>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d102      	bne.n	80012c6 <HAL_DMA_IRQHandler+0x14a>
 80012c0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80012c4:	e00e      	b.n	80012e4 <HAL_DMA_IRQHandler+0x168>
 80012c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012ca:	e00b      	b.n	80012e4 <HAL_DMA_IRQHandler+0x168>
 80012cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012d0:	e008      	b.n	80012e4 <HAL_DMA_IRQHandler+0x168>
 80012d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012d6:	e005      	b.n	80012e4 <HAL_DMA_IRQHandler+0x168>
 80012d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012dc:	e002      	b.n	80012e4 <HAL_DMA_IRQHandler+0x168>
 80012de:	2320      	movs	r3, #32
 80012e0:	e000      	b.n	80012e4 <HAL_DMA_IRQHandler+0x168>
 80012e2:	2302      	movs	r3, #2
 80012e4:	4a27      	ldr	r2, [pc, #156]	@ (8001384 <HAL_DMA_IRQHandler+0x208>)
 80012e6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d034      	beq.n	8001362 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001300:	e02f      	b.n	8001362 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001306:	2208      	movs	r2, #8
 8001308:	409a      	lsls	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4013      	ands	r3, r2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d028      	beq.n	8001364 <HAL_DMA_IRQHandler+0x1e8>
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	f003 0308 	and.w	r3, r3, #8
 8001318:	2b00      	cmp	r3, #0
 800131a:	d023      	beq.n	8001364 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 020e 	bic.w	r2, r2, #14
 800132a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001334:	2101      	movs	r1, #1
 8001336:	fa01 f202 	lsl.w	r2, r1, r2
 800133a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2201      	movs	r2, #1
 8001340:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	2b00      	cmp	r3, #0
 8001358:	d004      	beq.n	8001364 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	4798      	blx	r3
    }
  }
  return;
 8001362:	bf00      	nop
 8001364:	bf00      	nop
}
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40020008 	.word	0x40020008
 8001370:	4002001c 	.word	0x4002001c
 8001374:	40020030 	.word	0x40020030
 8001378:	40020044 	.word	0x40020044
 800137c:	40020058 	.word	0x40020058
 8001380:	4002006c 	.word	0x4002006c
 8001384:	40020000 	.word	0x40020000

08001388 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800139e:	2101      	movs	r1, #1
 80013a0:	fa01 f202 	lsl.w	r2, r1, r2
 80013a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b10      	cmp	r3, #16
 80013b4:	d108      	bne.n	80013c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013c6:	e007      	b.n	80013d8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	60da      	str	r2, [r3, #12]
}
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr
	...

080013e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b08b      	sub	sp, #44	@ 0x2c
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f6:	e169      	b.n	80016cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013f8:	2201      	movs	r2, #1
 80013fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	69fa      	ldr	r2, [r7, #28]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	429a      	cmp	r2, r3
 8001412:	f040 8158 	bne.w	80016c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4a9a      	ldr	r2, [pc, #616]	@ (8001684 <HAL_GPIO_Init+0x2a0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d05e      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 8001420:	4a98      	ldr	r2, [pc, #608]	@ (8001684 <HAL_GPIO_Init+0x2a0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d875      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 8001426:	4a98      	ldr	r2, [pc, #608]	@ (8001688 <HAL_GPIO_Init+0x2a4>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d058      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 800142c:	4a96      	ldr	r2, [pc, #600]	@ (8001688 <HAL_GPIO_Init+0x2a4>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d86f      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 8001432:	4a96      	ldr	r2, [pc, #600]	@ (800168c <HAL_GPIO_Init+0x2a8>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d052      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 8001438:	4a94      	ldr	r2, [pc, #592]	@ (800168c <HAL_GPIO_Init+0x2a8>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d869      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 800143e:	4a94      	ldr	r2, [pc, #592]	@ (8001690 <HAL_GPIO_Init+0x2ac>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d04c      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 8001444:	4a92      	ldr	r2, [pc, #584]	@ (8001690 <HAL_GPIO_Init+0x2ac>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d863      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 800144a:	4a92      	ldr	r2, [pc, #584]	@ (8001694 <HAL_GPIO_Init+0x2b0>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d046      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 8001450:	4a90      	ldr	r2, [pc, #576]	@ (8001694 <HAL_GPIO_Init+0x2b0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d85d      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 8001456:	2b12      	cmp	r3, #18
 8001458:	d82a      	bhi.n	80014b0 <HAL_GPIO_Init+0xcc>
 800145a:	2b12      	cmp	r3, #18
 800145c:	d859      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 800145e:	a201      	add	r2, pc, #4	@ (adr r2, 8001464 <HAL_GPIO_Init+0x80>)
 8001460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001464:	080014df 	.word	0x080014df
 8001468:	080014b9 	.word	0x080014b9
 800146c:	080014cb 	.word	0x080014cb
 8001470:	0800150d 	.word	0x0800150d
 8001474:	08001513 	.word	0x08001513
 8001478:	08001513 	.word	0x08001513
 800147c:	08001513 	.word	0x08001513
 8001480:	08001513 	.word	0x08001513
 8001484:	08001513 	.word	0x08001513
 8001488:	08001513 	.word	0x08001513
 800148c:	08001513 	.word	0x08001513
 8001490:	08001513 	.word	0x08001513
 8001494:	08001513 	.word	0x08001513
 8001498:	08001513 	.word	0x08001513
 800149c:	08001513 	.word	0x08001513
 80014a0:	08001513 	.word	0x08001513
 80014a4:	08001513 	.word	0x08001513
 80014a8:	080014c1 	.word	0x080014c1
 80014ac:	080014d5 	.word	0x080014d5
 80014b0:	4a79      	ldr	r2, [pc, #484]	@ (8001698 <HAL_GPIO_Init+0x2b4>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d013      	beq.n	80014de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014b6:	e02c      	b.n	8001512 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	623b      	str	r3, [r7, #32]
          break;
 80014be:	e029      	b.n	8001514 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	3304      	adds	r3, #4
 80014c6:	623b      	str	r3, [r7, #32]
          break;
 80014c8:	e024      	b.n	8001514 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	3308      	adds	r3, #8
 80014d0:	623b      	str	r3, [r7, #32]
          break;
 80014d2:	e01f      	b.n	8001514 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	330c      	adds	r3, #12
 80014da:	623b      	str	r3, [r7, #32]
          break;
 80014dc:	e01a      	b.n	8001514 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d102      	bne.n	80014ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014e6:	2304      	movs	r3, #4
 80014e8:	623b      	str	r3, [r7, #32]
          break;
 80014ea:	e013      	b.n	8001514 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d105      	bne.n	8001500 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014f4:	2308      	movs	r3, #8
 80014f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69fa      	ldr	r2, [r7, #28]
 80014fc:	611a      	str	r2, [r3, #16]
          break;
 80014fe:	e009      	b.n	8001514 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001500:	2308      	movs	r3, #8
 8001502:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	615a      	str	r2, [r3, #20]
          break;
 800150a:	e003      	b.n	8001514 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
          break;
 8001510:	e000      	b.n	8001514 <HAL_GPIO_Init+0x130>
          break;
 8001512:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	2bff      	cmp	r3, #255	@ 0xff
 8001518:	d801      	bhi.n	800151e <HAL_GPIO_Init+0x13a>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	e001      	b.n	8001522 <HAL_GPIO_Init+0x13e>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3304      	adds	r3, #4
 8001522:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	2bff      	cmp	r3, #255	@ 0xff
 8001528:	d802      	bhi.n	8001530 <HAL_GPIO_Init+0x14c>
 800152a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	e002      	b.n	8001536 <HAL_GPIO_Init+0x152>
 8001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001532:	3b08      	subs	r3, #8
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	210f      	movs	r1, #15
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	fa01 f303 	lsl.w	r3, r1, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	401a      	ands	r2, r3
 8001548:	6a39      	ldr	r1, [r7, #32]
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	fa01 f303 	lsl.w	r3, r1, r3
 8001550:	431a      	orrs	r2, r3
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 80b1 	beq.w	80016c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001564:	4b4d      	ldr	r3, [pc, #308]	@ (800169c <HAL_GPIO_Init+0x2b8>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	4a4c      	ldr	r2, [pc, #304]	@ (800169c <HAL_GPIO_Init+0x2b8>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6193      	str	r3, [r2, #24]
 8001570:	4b4a      	ldr	r3, [pc, #296]	@ (800169c <HAL_GPIO_Init+0x2b8>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800157c:	4a48      	ldr	r2, [pc, #288]	@ (80016a0 <HAL_GPIO_Init+0x2bc>)
 800157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3302      	adds	r3, #2
 8001584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001588:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800158a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	220f      	movs	r2, #15
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	4013      	ands	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a40      	ldr	r2, [pc, #256]	@ (80016a4 <HAL_GPIO_Init+0x2c0>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d013      	beq.n	80015d0 <HAL_GPIO_Init+0x1ec>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a3f      	ldr	r2, [pc, #252]	@ (80016a8 <HAL_GPIO_Init+0x2c4>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d00d      	beq.n	80015cc <HAL_GPIO_Init+0x1e8>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a3e      	ldr	r2, [pc, #248]	@ (80016ac <HAL_GPIO_Init+0x2c8>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d007      	beq.n	80015c8 <HAL_GPIO_Init+0x1e4>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a3d      	ldr	r2, [pc, #244]	@ (80016b0 <HAL_GPIO_Init+0x2cc>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d101      	bne.n	80015c4 <HAL_GPIO_Init+0x1e0>
 80015c0:	2303      	movs	r3, #3
 80015c2:	e006      	b.n	80015d2 <HAL_GPIO_Init+0x1ee>
 80015c4:	2304      	movs	r3, #4
 80015c6:	e004      	b.n	80015d2 <HAL_GPIO_Init+0x1ee>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e002      	b.n	80015d2 <HAL_GPIO_Init+0x1ee>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <HAL_GPIO_Init+0x1ee>
 80015d0:	2300      	movs	r3, #0
 80015d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015d4:	f002 0203 	and.w	r2, r2, #3
 80015d8:	0092      	lsls	r2, r2, #2
 80015da:	4093      	lsls	r3, r2
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015e2:	492f      	ldr	r1, [pc, #188]	@ (80016a0 <HAL_GPIO_Init+0x2bc>)
 80015e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	3302      	adds	r3, #2
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d006      	beq.n	800160a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015fc:	4b2d      	ldr	r3, [pc, #180]	@ (80016b4 <HAL_GPIO_Init+0x2d0>)
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	492c      	ldr	r1, [pc, #176]	@ (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	608b      	str	r3, [r1, #8]
 8001608:	e006      	b.n	8001618 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800160a:	4b2a      	ldr	r3, [pc, #168]	@ (80016b4 <HAL_GPIO_Init+0x2d0>)
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	43db      	mvns	r3, r3
 8001612:	4928      	ldr	r1, [pc, #160]	@ (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001614:	4013      	ands	r3, r2
 8001616:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d006      	beq.n	8001632 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001624:	4b23      	ldr	r3, [pc, #140]	@ (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	4922      	ldr	r1, [pc, #136]	@ (80016b4 <HAL_GPIO_Init+0x2d0>)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	60cb      	str	r3, [r1, #12]
 8001630:	e006      	b.n	8001640 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001632:	4b20      	ldr	r3, [pc, #128]	@ (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	43db      	mvns	r3, r3
 800163a:	491e      	ldr	r1, [pc, #120]	@ (80016b4 <HAL_GPIO_Init+0x2d0>)
 800163c:	4013      	ands	r3, r2
 800163e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d006      	beq.n	800165a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800164c:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <HAL_GPIO_Init+0x2d0>)
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	4918      	ldr	r1, [pc, #96]	@ (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
 8001658:	e006      	b.n	8001668 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800165a:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <HAL_GPIO_Init+0x2d0>)
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	43db      	mvns	r3, r3
 8001662:	4914      	ldr	r1, [pc, #80]	@ (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001664:	4013      	ands	r3, r2
 8001666:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d021      	beq.n	80016b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001674:	4b0f      	ldr	r3, [pc, #60]	@ (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	490e      	ldr	r1, [pc, #56]	@ (80016b4 <HAL_GPIO_Init+0x2d0>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	600b      	str	r3, [r1, #0]
 8001680:	e021      	b.n	80016c6 <HAL_GPIO_Init+0x2e2>
 8001682:	bf00      	nop
 8001684:	10320000 	.word	0x10320000
 8001688:	10310000 	.word	0x10310000
 800168c:	10220000 	.word	0x10220000
 8001690:	10210000 	.word	0x10210000
 8001694:	10120000 	.word	0x10120000
 8001698:	10110000 	.word	0x10110000
 800169c:	40021000 	.word	0x40021000
 80016a0:	40010000 	.word	0x40010000
 80016a4:	40010800 	.word	0x40010800
 80016a8:	40010c00 	.word	0x40010c00
 80016ac:	40011000 	.word	0x40011000
 80016b0:	40011400 	.word	0x40011400
 80016b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016b8:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <HAL_GPIO_Init+0x304>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	43db      	mvns	r3, r3
 80016c0:	4909      	ldr	r1, [pc, #36]	@ (80016e8 <HAL_GPIO_Init+0x304>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c8:	3301      	adds	r3, #1
 80016ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d2:	fa22 f303 	lsr.w	r3, r2, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f47f ae8e 	bne.w	80013f8 <HAL_GPIO_Init+0x14>
  }
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	372c      	adds	r7, #44	@ 0x2c
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	40010400 	.word	0x40010400

080016ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e272      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8087 	beq.w	800181a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800170c:	4b92      	ldr	r3, [pc, #584]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b04      	cmp	r3, #4
 8001716:	d00c      	beq.n	8001732 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001718:	4b8f      	ldr	r3, [pc, #572]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 030c 	and.w	r3, r3, #12
 8001720:	2b08      	cmp	r3, #8
 8001722:	d112      	bne.n	800174a <HAL_RCC_OscConfig+0x5e>
 8001724:	4b8c      	ldr	r3, [pc, #560]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800172c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001730:	d10b      	bne.n	800174a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001732:	4b89      	ldr	r3, [pc, #548]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d06c      	beq.n	8001818 <HAL_RCC_OscConfig+0x12c>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d168      	bne.n	8001818 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e24c      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001752:	d106      	bne.n	8001762 <HAL_RCC_OscConfig+0x76>
 8001754:	4b80      	ldr	r3, [pc, #512]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a7f      	ldr	r2, [pc, #508]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 800175a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	e02e      	b.n	80017c0 <HAL_RCC_OscConfig+0xd4>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10c      	bne.n	8001784 <HAL_RCC_OscConfig+0x98>
 800176a:	4b7b      	ldr	r3, [pc, #492]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a7a      	ldr	r2, [pc, #488]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001770:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	4b78      	ldr	r3, [pc, #480]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a77      	ldr	r2, [pc, #476]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 800177c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	e01d      	b.n	80017c0 <HAL_RCC_OscConfig+0xd4>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800178c:	d10c      	bne.n	80017a8 <HAL_RCC_OscConfig+0xbc>
 800178e:	4b72      	ldr	r3, [pc, #456]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a71      	ldr	r2, [pc, #452]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001794:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	4b6f      	ldr	r3, [pc, #444]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a6e      	ldr	r2, [pc, #440]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e00b      	b.n	80017c0 <HAL_RCC_OscConfig+0xd4>
 80017a8:	4b6b      	ldr	r3, [pc, #428]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a6a      	ldr	r2, [pc, #424]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b68      	ldr	r3, [pc, #416]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a67      	ldr	r2, [pc, #412]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d013      	beq.n	80017f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7fe ff16 	bl	80005f8 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d0:	f7fe ff12 	bl	80005f8 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	@ 0x64
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e200      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0xe4>
 80017ee:	e014      	b.n	800181a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7fe ff02 	bl	80005f8 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f8:	f7fe fefe 	bl	80005f8 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	@ 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e1ec      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180a:	4b53      	ldr	r3, [pc, #332]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x10c>
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d063      	beq.n	80018ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001826:	4b4c      	ldr	r3, [pc, #304]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00b      	beq.n	800184a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001832:	4b49      	ldr	r3, [pc, #292]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b08      	cmp	r3, #8
 800183c:	d11c      	bne.n	8001878 <HAL_RCC_OscConfig+0x18c>
 800183e:	4b46      	ldr	r3, [pc, #280]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d116      	bne.n	8001878 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184a:	4b43      	ldr	r3, [pc, #268]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <HAL_RCC_OscConfig+0x176>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d001      	beq.n	8001862 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e1c0      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001862:	4b3d      	ldr	r3, [pc, #244]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4939      	ldr	r1, [pc, #228]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001876:	e03a      	b.n	80018ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d020      	beq.n	80018c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001880:	4b36      	ldr	r3, [pc, #216]	@ (800195c <HAL_RCC_OscConfig+0x270>)
 8001882:	2201      	movs	r2, #1
 8001884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001886:	f7fe feb7 	bl	80005f8 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188e:	f7fe feb3 	bl	80005f8 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e1a1      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f0      	beq.n	800188e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4927      	ldr	r1, [pc, #156]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]
 80018c0:	e015      	b.n	80018ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018c2:	4b26      	ldr	r3, [pc, #152]	@ (800195c <HAL_RCC_OscConfig+0x270>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7fe fe96 	bl	80005f8 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d0:	f7fe fe92 	bl	80005f8 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e180      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d03a      	beq.n	8001970 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d019      	beq.n	8001936 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001902:	4b17      	ldr	r3, [pc, #92]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 8001904:	2201      	movs	r2, #1
 8001906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001908:	f7fe fe76 	bl	80005f8 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001910:	f7fe fe72 	bl	80005f8 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e160      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001922:	4b0d      	ldr	r3, [pc, #52]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800192e:	2001      	movs	r0, #1
 8001930:	f000 fa9c 	bl	8001e6c <RCC_Delay>
 8001934:	e01c      	b.n	8001970 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001936:	4b0a      	ldr	r3, [pc, #40]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193c:	f7fe fe5c 	bl	80005f8 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001942:	e00f      	b.n	8001964 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001944:	f7fe fe58 	bl	80005f8 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d908      	bls.n	8001964 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e146      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	42420000 	.word	0x42420000
 8001960:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001964:	4b92      	ldr	r3, [pc, #584]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1e9      	bne.n	8001944 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 80a6 	beq.w	8001aca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001982:	4b8b      	ldr	r3, [pc, #556]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10d      	bne.n	80019aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	4b88      	ldr	r3, [pc, #544]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	4a87      	ldr	r2, [pc, #540]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001998:	61d3      	str	r3, [r2, #28]
 800199a:	4b85      	ldr	r3, [pc, #532]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a6:	2301      	movs	r3, #1
 80019a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019aa:	4b82      	ldr	r3, [pc, #520]	@ (8001bb4 <HAL_RCC_OscConfig+0x4c8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d118      	bne.n	80019e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019b6:	4b7f      	ldr	r3, [pc, #508]	@ (8001bb4 <HAL_RCC_OscConfig+0x4c8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a7e      	ldr	r2, [pc, #504]	@ (8001bb4 <HAL_RCC_OscConfig+0x4c8>)
 80019bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c2:	f7fe fe19 	bl	80005f8 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ca:	f7fe fe15 	bl	80005f8 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b64      	cmp	r3, #100	@ 0x64
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e103      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019dc:	4b75      	ldr	r3, [pc, #468]	@ (8001bb4 <HAL_RCC_OscConfig+0x4c8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x312>
 80019f0:	4b6f      	ldr	r3, [pc, #444]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4a6e      	ldr	r2, [pc, #440]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6213      	str	r3, [r2, #32]
 80019fc:	e02d      	b.n	8001a5a <HAL_RCC_OscConfig+0x36e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x334>
 8001a06:	4b6a      	ldr	r3, [pc, #424]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	4a69      	ldr	r2, [pc, #420]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	f023 0301 	bic.w	r3, r3, #1
 8001a10:	6213      	str	r3, [r2, #32]
 8001a12:	4b67      	ldr	r3, [pc, #412]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	4a66      	ldr	r2, [pc, #408]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	f023 0304 	bic.w	r3, r3, #4
 8001a1c:	6213      	str	r3, [r2, #32]
 8001a1e:	e01c      	b.n	8001a5a <HAL_RCC_OscConfig+0x36e>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b05      	cmp	r3, #5
 8001a26:	d10c      	bne.n	8001a42 <HAL_RCC_OscConfig+0x356>
 8001a28:	4b61      	ldr	r3, [pc, #388]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	4a60      	ldr	r2, [pc, #384]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	f043 0304 	orr.w	r3, r3, #4
 8001a32:	6213      	str	r3, [r2, #32]
 8001a34:	4b5e      	ldr	r3, [pc, #376]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	4a5d      	ldr	r2, [pc, #372]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6213      	str	r3, [r2, #32]
 8001a40:	e00b      	b.n	8001a5a <HAL_RCC_OscConfig+0x36e>
 8001a42:	4b5b      	ldr	r3, [pc, #364]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4a5a      	ldr	r2, [pc, #360]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	6213      	str	r3, [r2, #32]
 8001a4e:	4b58      	ldr	r3, [pc, #352]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	4a57      	ldr	r2, [pc, #348]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	f023 0304 	bic.w	r3, r3, #4
 8001a58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d015      	beq.n	8001a8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a62:	f7fe fdc9 	bl	80005f8 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7fe fdc5 	bl	80005f8 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e0b1      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a80:	4b4b      	ldr	r3, [pc, #300]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0ee      	beq.n	8001a6a <HAL_RCC_OscConfig+0x37e>
 8001a8c:	e014      	b.n	8001ab8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8e:	f7fe fdb3 	bl	80005f8 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a94:	e00a      	b.n	8001aac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f7fe fdaf 	bl	80005f8 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e09b      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aac:	4b40      	ldr	r3, [pc, #256]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1ee      	bne.n	8001a96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d105      	bne.n	8001aca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001abe:	4b3c      	ldr	r3, [pc, #240]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	4a3b      	ldr	r2, [pc, #236]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ac8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 8087 	beq.w	8001be2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad4:	4b36      	ldr	r3, [pc, #216]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 030c 	and.w	r3, r3, #12
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d061      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d146      	bne.n	8001b76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae8:	4b33      	ldr	r3, [pc, #204]	@ (8001bb8 <HAL_RCC_OscConfig+0x4cc>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aee:	f7fe fd83 	bl	80005f8 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af6:	f7fe fd7f 	bl	80005f8 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e06d      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b08:	4b29      	ldr	r3, [pc, #164]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f0      	bne.n	8001af6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b1c:	d108      	bne.n	8001b30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b1e:	4b24      	ldr	r3, [pc, #144]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	4921      	ldr	r1, [pc, #132]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b30:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a19      	ldr	r1, [r3, #32]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b40:	430b      	orrs	r3, r1
 8001b42:	491b      	ldr	r1, [pc, #108]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b48:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb8 <HAL_RCC_OscConfig+0x4cc>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7fe fd53 	bl	80005f8 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b56:	f7fe fd4f 	bl	80005f8 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e03d      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b68:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x46a>
 8001b74:	e035      	b.n	8001be2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b76:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <HAL_RCC_OscConfig+0x4cc>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7fe fd3c 	bl	80005f8 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b84:	f7fe fd38 	bl	80005f8 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e026      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b96:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x498>
 8001ba2:	e01e      	b.n	8001be2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d107      	bne.n	8001bbc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e019      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40007000 	.word	0x40007000
 8001bb8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <HAL_RCC_OscConfig+0x500>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d106      	bne.n	8001bde <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d001      	beq.n	8001be2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021000 	.word	0x40021000

08001bf0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0d0      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c04:	4b6a      	ldr	r3, [pc, #424]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d910      	bls.n	8001c34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	4b67      	ldr	r3, [pc, #412]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 0207 	bic.w	r2, r3, #7
 8001c1a:	4965      	ldr	r1, [pc, #404]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	4b63      	ldr	r3, [pc, #396]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0b8      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d020      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c4c:	4b59      	ldr	r3, [pc, #356]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	4a58      	ldr	r2, [pc, #352]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c64:	4b53      	ldr	r3, [pc, #332]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	4a52      	ldr	r2, [pc, #328]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c70:	4b50      	ldr	r3, [pc, #320]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	494d      	ldr	r1, [pc, #308]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d040      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d107      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	4b47      	ldr	r3, [pc, #284]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d115      	bne.n	8001cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e07f      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d107      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cae:	4b41      	ldr	r3, [pc, #260]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d109      	bne.n	8001cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e073      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbe:	4b3d      	ldr	r3, [pc, #244]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e06b      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cce:	4b39      	ldr	r3, [pc, #228]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f023 0203 	bic.w	r2, r3, #3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	4936      	ldr	r1, [pc, #216]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce0:	f7fe fc8a 	bl	80005f8 <HAL_GetTick>
 8001ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce6:	e00a      	b.n	8001cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce8:	f7fe fc86 	bl	80005f8 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e053      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfe:	4b2d      	ldr	r3, [pc, #180]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 020c 	and.w	r2, r3, #12
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d1eb      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d10:	4b27      	ldr	r3, [pc, #156]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d210      	bcs.n	8001d40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1e:	4b24      	ldr	r3, [pc, #144]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 0207 	bic.w	r2, r3, #7
 8001d26:	4922      	ldr	r1, [pc, #136]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2e:	4b20      	ldr	r3, [pc, #128]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e032      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d4c:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4916      	ldr	r1, [pc, #88]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d6a:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	490e      	ldr	r1, [pc, #56]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d7e:	f000 f821 	bl	8001dc4 <HAL_RCC_GetSysClockFreq>
 8001d82:	4602      	mov	r2, r0
 8001d84:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	490a      	ldr	r1, [pc, #40]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d90:	5ccb      	ldrb	r3, [r1, r3]
 8001d92:	fa22 f303 	lsr.w	r3, r2, r3
 8001d96:	4a09      	ldr	r2, [pc, #36]	@ (8001dbc <HAL_RCC_ClockConfig+0x1cc>)
 8001d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d9a:	4b09      	ldr	r3, [pc, #36]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1d0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fbe8 	bl	8000574 <HAL_InitTick>

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40022000 	.word	0x40022000
 8001db4:	40021000 	.word	0x40021000
 8001db8:	08002084 	.word	0x08002084
 8001dbc:	20000000 	.word	0x20000000
 8001dc0:	20000004 	.word	0x20000004

08001dc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dde:	4b1e      	ldr	r3, [pc, #120]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x94>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d002      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x30>
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d003      	beq.n	8001dfa <HAL_RCC_GetSysClockFreq+0x36>
 8001df2:	e027      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001df4:	4b19      	ldr	r3, [pc, #100]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x98>)
 8001df6:	613b      	str	r3, [r7, #16]
      break;
 8001df8:	e027      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	0c9b      	lsrs	r3, r3, #18
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	4a17      	ldr	r2, [pc, #92]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e04:	5cd3      	ldrb	r3, [r2, r3]
 8001e06:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d010      	beq.n	8001e34 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e12:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	0c5b      	lsrs	r3, r3, #17
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	4a11      	ldr	r2, [pc, #68]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e1e:	5cd3      	ldrb	r3, [r2, r3]
 8001e20:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a0d      	ldr	r2, [pc, #52]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e26:	fb03 f202 	mul.w	r2, r3, r2
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	e004      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a0c      	ldr	r2, [pc, #48]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e38:	fb02 f303 	mul.w	r3, r2, r3
 8001e3c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	613b      	str	r3, [r7, #16]
      break;
 8001e42:	e002      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e44:	4b05      	ldr	r3, [pc, #20]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e46:	613b      	str	r3, [r7, #16]
      break;
 8001e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e4a:	693b      	ldr	r3, [r7, #16]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	371c      	adds	r7, #28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	007a1200 	.word	0x007a1200
 8001e60:	08002094 	.word	0x08002094
 8001e64:	080020a4 	.word	0x080020a4
 8001e68:	003d0900 	.word	0x003d0900

08001e6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <RCC_Delay+0x34>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea4 <RCC_Delay+0x38>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	0a5b      	lsrs	r3, r3, #9
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	fb02 f303 	mul.w	r3, r2, r3
 8001e86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e88:	bf00      	nop
  }
  while (Delay --);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1e5a      	subs	r2, r3, #1
 8001e8e:	60fa      	str	r2, [r7, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f9      	bne.n	8001e88 <RCC_Delay+0x1c>
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	10624dd3 	.word	0x10624dd3

08001ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d07d      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec8:	4b4f      	ldr	r3, [pc, #316]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10d      	bne.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed4:	4b4c      	ldr	r3, [pc, #304]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	4a4b      	ldr	r2, [pc, #300]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ede:	61d3      	str	r3, [r2, #28]
 8001ee0:	4b49      	ldr	r3, [pc, #292]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eec:	2301      	movs	r3, #1
 8001eee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef0:	4b46      	ldr	r3, [pc, #280]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d118      	bne.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001efc:	4b43      	ldr	r3, [pc, #268]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a42      	ldr	r2, [pc, #264]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f08:	f7fe fb76 	bl	80005f8 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0e:	e008      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f10:	f7fe fb72 	bl	80005f8 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	@ 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e06d      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f22:	4b3a      	ldr	r3, [pc, #232]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f2e:	4b36      	ldr	r3, [pc, #216]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f36:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d02e      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d027      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f4c:	4b2e      	ldr	r3, [pc, #184]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f54:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f56:	4b2e      	ldr	r3, [pc, #184]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f5c:	4b2c      	ldr	r3, [pc, #176]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f62:	4a29      	ldr	r2, [pc, #164]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d014      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f72:	f7fe fb41 	bl	80005f8 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f78:	e00a      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7a:	f7fe fb3d 	bl	80005f8 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e036      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f90:	4b1d      	ldr	r3, [pc, #116]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0ee      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4917      	ldr	r1, [pc, #92]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d105      	bne.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb4:	4b14      	ldr	r3, [pc, #80]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	4a13      	ldr	r2, [pc, #76]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fbe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	490b      	ldr	r1, [pc, #44]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d008      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fea:	4b07      	ldr	r3, [pc, #28]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	4904      	ldr	r1, [pc, #16]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	40007000 	.word	0x40007000
 8002010:	42420440 	.word	0x42420440

08002014 <memset>:
 8002014:	4603      	mov	r3, r0
 8002016:	4402      	add	r2, r0
 8002018:	4293      	cmp	r3, r2
 800201a:	d100      	bne.n	800201e <memset+0xa>
 800201c:	4770      	bx	lr
 800201e:	f803 1b01 	strb.w	r1, [r3], #1
 8002022:	e7f9      	b.n	8002018 <memset+0x4>

08002024 <__libc_init_array>:
 8002024:	b570      	push	{r4, r5, r6, lr}
 8002026:	2600      	movs	r6, #0
 8002028:	4d0c      	ldr	r5, [pc, #48]	@ (800205c <__libc_init_array+0x38>)
 800202a:	4c0d      	ldr	r4, [pc, #52]	@ (8002060 <__libc_init_array+0x3c>)
 800202c:	1b64      	subs	r4, r4, r5
 800202e:	10a4      	asrs	r4, r4, #2
 8002030:	42a6      	cmp	r6, r4
 8002032:	d109      	bne.n	8002048 <__libc_init_array+0x24>
 8002034:	f000 f81a 	bl	800206c <_init>
 8002038:	2600      	movs	r6, #0
 800203a:	4d0a      	ldr	r5, [pc, #40]	@ (8002064 <__libc_init_array+0x40>)
 800203c:	4c0a      	ldr	r4, [pc, #40]	@ (8002068 <__libc_init_array+0x44>)
 800203e:	1b64      	subs	r4, r4, r5
 8002040:	10a4      	asrs	r4, r4, #2
 8002042:	42a6      	cmp	r6, r4
 8002044:	d105      	bne.n	8002052 <__libc_init_array+0x2e>
 8002046:	bd70      	pop	{r4, r5, r6, pc}
 8002048:	f855 3b04 	ldr.w	r3, [r5], #4
 800204c:	4798      	blx	r3
 800204e:	3601      	adds	r6, #1
 8002050:	e7ee      	b.n	8002030 <__libc_init_array+0xc>
 8002052:	f855 3b04 	ldr.w	r3, [r5], #4
 8002056:	4798      	blx	r3
 8002058:	3601      	adds	r6, #1
 800205a:	e7f2      	b.n	8002042 <__libc_init_array+0x1e>
 800205c:	080020a8 	.word	0x080020a8
 8002060:	080020a8 	.word	0x080020a8
 8002064:	080020a8 	.word	0x080020a8
 8002068:	080020ac 	.word	0x080020ac

0800206c <_init>:
 800206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206e:	bf00      	nop
 8002070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002072:	bc08      	pop	{r3}
 8002074:	469e      	mov	lr, r3
 8002076:	4770      	bx	lr

08002078 <_fini>:
 8002078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800207a:	bf00      	nop
 800207c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800207e:	bc08      	pop	{r3}
 8002080:	469e      	mov	lr, r3
 8002082:	4770      	bx	lr
